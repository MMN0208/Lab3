
Traffic_Light.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002860  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  0800296c  0800296c  0001296c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800299c  0800299c  000200a4  2**0
                  CONTENTS
  4 .ARM          00000000  0800299c  0800299c  000200a4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800299c  0800299c  000200a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800299c  0800299c  0001299c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080029a0  080029a0  000129a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  080029a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  200000a4  08002a48  000200a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000160  08002a48  00020160  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000901c  00000000  00000000  000200cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e0a  00000000  00000000  000290e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ae8  00000000  00000000  0002aef8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009b8  00000000  00000000  0002b9e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017219  00000000  00000000  0002c398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cd90  00000000  00000000  000435b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008247d  00000000  00000000  00050341  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d27be  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a90  00000000  00000000  000d2810  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000a4 	.word	0x200000a4
 8000128:	00000000 	.word	0x00000000
 800012c:	08002954 	.word	0x08002954

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000a8 	.word	0x200000a8
 8000148:	08002954 	.word	0x08002954

0800014c <fsm_multi_mode_run>:
#define MODE_GRN	3

int newGrnTime = 0;
int newYelTime = 0;

void fsm_multi_mode_run(void) {
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	switch(status) {
 8000150:	4bbb      	ldr	r3, [pc, #748]	; (8000440 <fsm_multi_mode_run+0x2f4>)
 8000152:	781b      	ldrb	r3, [r3, #0]
 8000154:	2b06      	cmp	r3, #6
 8000156:	f200 821c 	bhi.w	8000592 <fsm_multi_mode_run+0x446>
 800015a:	a201      	add	r2, pc, #4	; (adr r2, 8000160 <fsm_multi_mode_run+0x14>)
 800015c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000160:	0800017d 	.word	0x0800017d
 8000164:	080001c5 	.word	0x080001c5
 8000168:	0800025d 	.word	0x0800025d
 800016c:	08000303 	.word	0x08000303
 8000170:	0800039b 	.word	0x0800039b
 8000174:	08000455 	.word	0x08000455
 8000178:	0800050b 	.word	0x0800050b
	case INIT:
		//init timer 1 for 7seg led scanning
		setTimer1(TIMER_INIT);
 800017c:	200a      	movs	r0, #10
 800017e:	f000 fd0b 	bl	8000b98 <setTimer1>

		//init timer 2 for count-down updating
		setTimer2(TIMER_INIT);
 8000182:	200a      	movs	r0, #10
 8000184:	f000 fd24 	bl	8000bd0 <setTimer2>

		//set traffic timer to grn time
		setTrafficTimer(getGrnTime());
 8000188:	f000 ffee 	bl	8001168 <getGrnTime>
 800018c:	4603      	mov	r3, r0
 800018e:	4618      	mov	r0, r3
 8000190:	f000 fce6 	bl	8000b60 <setTrafficTimer>

		//turn off all leds
		allOff(SOUTH_NORTH);
 8000194:	2000      	movs	r0, #0
 8000196:	f000 fe67 	bl	8000e68 <allOff>
		allOff(EAST_WEST);
 800019a:	2001      	movs	r0, #1
 800019c:	f000 fe64 	bl	8000e68 <allOff>

		//set count-down for S/N, E/W lights
		setCountdown(SOUTH_NORTH, getRedTime());
 80001a0:	f000 ffc6 	bl	8001130 <getRedTime>
 80001a4:	4603      	mov	r3, r0
 80001a6:	4619      	mov	r1, r3
 80001a8:	2000      	movs	r0, #0
 80001aa:	f000 ffeb 	bl	8001184 <setCountdown>
		setCountdown(EAST_WEST, getGrnTime());
 80001ae:	f000 ffdb 	bl	8001168 <getGrnTime>
 80001b2:	4603      	mov	r3, r0
 80001b4:	4619      	mov	r1, r3
 80001b6:	2001      	movs	r0, #1
 80001b8:	f000 ffe4 	bl	8001184 <setCountdown>
		status = SN_RED__EW_GRN;
 80001bc:	4ba0      	ldr	r3, [pc, #640]	; (8000440 <fsm_multi_mode_run+0x2f4>)
 80001be:	2201      	movs	r2, #1
 80001c0:	701a      	strb	r2, [r3, #0]
		break;
 80001c2:	e1f3      	b.n	80005ac <fsm_multi_mode_run+0x460>
	case SN_RED__EW_GRN:
		redLight(SOUTH_NORTH);
 80001c4:	2000      	movs	r0, #0
 80001c6:	f000 fe87 	bl	8000ed8 <redLight>
		grnLight(EAST_WEST);
 80001ca:	2001      	movs	r0, #1
 80001cc:	f000 fef4 	bl	8000fb8 <grnLight>
		updateCountdownBuffer();
 80001d0:	f000 fbf2 	bl	80009b8 <updateCountdownBuffer>
		scan7SEG();
 80001d4:	f000 fc96 	bl	8000b04 <scan7SEG>

		if(timer2_flag == 1) {
 80001d8:	4b9a      	ldr	r3, [pc, #616]	; (8000444 <fsm_multi_mode_run+0x2f8>)
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	2b01      	cmp	r3, #1
 80001de:	d105      	bne.n	80001ec <fsm_multi_mode_run+0xa0>
			setTimer2(SECOND);
 80001e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001e4:	f000 fcf4 	bl	8000bd0 <setTimer2>
			updateCountdown();
 80001e8:	f000 fffa 	bl	80011e0 <updateCountdown>
		}

		if(traffic_timer_flag == 1) {
 80001ec:	4b96      	ldr	r3, [pc, #600]	; (8000448 <fsm_multi_mode_run+0x2fc>)
 80001ee:	681b      	ldr	r3, [r3, #0]
 80001f0:	2b01      	cmp	r3, #1
 80001f2:	d10f      	bne.n	8000214 <fsm_multi_mode_run+0xc8>
			setTrafficTimer(getYelTime());
 80001f4:	f000 ffaa 	bl	800114c <getYelTime>
 80001f8:	4603      	mov	r3, r0
 80001fa:	4618      	mov	r0, r3
 80001fc:	f000 fcb0 	bl	8000b60 <setTrafficTimer>
			setCountdown(EAST_WEST, getYelTime());
 8000200:	f000 ffa4 	bl	800114c <getYelTime>
 8000204:	4603      	mov	r3, r0
 8000206:	4619      	mov	r1, r3
 8000208:	2001      	movs	r0, #1
 800020a:	f000 ffbb 	bl	8001184 <setCountdown>
			status = SN_RED__EW_YEL;
 800020e:	4b8c      	ldr	r3, [pc, #560]	; (8000440 <fsm_multi_mode_run+0x2f4>)
 8000210:	2202      	movs	r2, #2
 8000212:	701a      	strb	r2, [r3, #0]
		}

		if(is_button_pressed(CHANGE_MODE)) {
 8000214:	2000      	movs	r0, #0
 8000216:	f000 fadd 	bl	80007d4 <is_button_pressed>
 800021a:	4603      	mov	r3, r0
 800021c:	2b00      	cmp	r3, #0
 800021e:	f000 81ba 	beq.w	8000596 <fsm_multi_mode_run+0x44a>
			setTrafficTimer(LED_BLINK);
 8000222:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000226:	f000 fc9b 	bl	8000b60 <setTrafficTimer>
			setTimer1(TIMER_INIT);
 800022a:	200a      	movs	r0, #10
 800022c:	f000 fcb4 	bl	8000b98 <setTimer1>
			reset7SEGIndex();
 8000230:	f000 fc8a 	bl	8000b48 <reset7SEGIndex>
			updateModeBuffer(MODE_YEL);
 8000234:	2002      	movs	r0, #2
 8000236:	f000 fc25 	bl	8000a84 <updateModeBuffer>
			yelBlink();
 800023a:	f000 fef5 	bl	8001028 <yelBlink>
			newYelTime = getYelTime() / SECOND;
 800023e:	f000 ff85 	bl	800114c <getYelTime>
 8000242:	4603      	mov	r3, r0
 8000244:	4a81      	ldr	r2, [pc, #516]	; (800044c <fsm_multi_mode_run+0x300>)
 8000246:	fb82 1203 	smull	r1, r2, r2, r3
 800024a:	1192      	asrs	r2, r2, #6
 800024c:	17db      	asrs	r3, r3, #31
 800024e:	1ad3      	subs	r3, r2, r3
 8000250:	4a7f      	ldr	r2, [pc, #508]	; (8000450 <fsm_multi_mode_run+0x304>)
 8000252:	6013      	str	r3, [r2, #0]
			status = SET_YEL;
 8000254:	4b7a      	ldr	r3, [pc, #488]	; (8000440 <fsm_multi_mode_run+0x2f4>)
 8000256:	2205      	movs	r2, #5
 8000258:	701a      	strb	r2, [r3, #0]
		}
		break;
 800025a:	e19c      	b.n	8000596 <fsm_multi_mode_run+0x44a>
	case SN_RED__EW_YEL:
		redLight(SOUTH_NORTH);
 800025c:	2000      	movs	r0, #0
 800025e:	f000 fe3b 	bl	8000ed8 <redLight>
		yelLight(EAST_WEST);
 8000262:	2001      	movs	r0, #1
 8000264:	f000 fe70 	bl	8000f48 <yelLight>
		updateCountdownBuffer();
 8000268:	f000 fba6 	bl	80009b8 <updateCountdownBuffer>
		scan7SEG();
 800026c:	f000 fc4a 	bl	8000b04 <scan7SEG>

		if(timer2_flag == 1) {
 8000270:	4b74      	ldr	r3, [pc, #464]	; (8000444 <fsm_multi_mode_run+0x2f8>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	2b01      	cmp	r3, #1
 8000276:	d105      	bne.n	8000284 <fsm_multi_mode_run+0x138>
			setTimer2(SECOND);
 8000278:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800027c:	f000 fca8 	bl	8000bd0 <setTimer2>
			updateCountdown();
 8000280:	f000 ffae 	bl	80011e0 <updateCountdown>
		}

		if(traffic_timer_flag == 1) {
 8000284:	4b70      	ldr	r3, [pc, #448]	; (8000448 <fsm_multi_mode_run+0x2fc>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	2b01      	cmp	r3, #1
 800028a:	d116      	bne.n	80002ba <fsm_multi_mode_run+0x16e>
			setTrafficTimer(getGrnTime());
 800028c:	f000 ff6c 	bl	8001168 <getGrnTime>
 8000290:	4603      	mov	r3, r0
 8000292:	4618      	mov	r0, r3
 8000294:	f000 fc64 	bl	8000b60 <setTrafficTimer>
			setCountdown(SOUTH_NORTH, getGrnTime());
 8000298:	f000 ff66 	bl	8001168 <getGrnTime>
 800029c:	4603      	mov	r3, r0
 800029e:	4619      	mov	r1, r3
 80002a0:	2000      	movs	r0, #0
 80002a2:	f000 ff6f 	bl	8001184 <setCountdown>
			setCountdown(EAST_WEST, getRedTime());
 80002a6:	f000 ff43 	bl	8001130 <getRedTime>
 80002aa:	4603      	mov	r3, r0
 80002ac:	4619      	mov	r1, r3
 80002ae:	2001      	movs	r0, #1
 80002b0:	f000 ff68 	bl	8001184 <setCountdown>
			status = SN_GRN__EW_RED;
 80002b4:	4b62      	ldr	r3, [pc, #392]	; (8000440 <fsm_multi_mode_run+0x2f4>)
 80002b6:	2203      	movs	r2, #3
 80002b8:	701a      	strb	r2, [r3, #0]
		}

		if(is_button_pressed(CHANGE_MODE)) {
 80002ba:	2000      	movs	r0, #0
 80002bc:	f000 fa8a 	bl	80007d4 <is_button_pressed>
 80002c0:	4603      	mov	r3, r0
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	f000 8169 	beq.w	800059a <fsm_multi_mode_run+0x44e>
			setTrafficTimer(LED_BLINK);
 80002c8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80002cc:	f000 fc48 	bl	8000b60 <setTrafficTimer>
			setTimer1(TIMER_INIT);
 80002d0:	200a      	movs	r0, #10
 80002d2:	f000 fc61 	bl	8000b98 <setTimer1>
			reset7SEGIndex();
 80002d6:	f000 fc37 	bl	8000b48 <reset7SEGIndex>
			updateModeBuffer(MODE_YEL);
 80002da:	2002      	movs	r0, #2
 80002dc:	f000 fbd2 	bl	8000a84 <updateModeBuffer>
			yelBlink();
 80002e0:	f000 fea2 	bl	8001028 <yelBlink>
			newYelTime = getYelTime() / SECOND;
 80002e4:	f000 ff32 	bl	800114c <getYelTime>
 80002e8:	4603      	mov	r3, r0
 80002ea:	4a58      	ldr	r2, [pc, #352]	; (800044c <fsm_multi_mode_run+0x300>)
 80002ec:	fb82 1203 	smull	r1, r2, r2, r3
 80002f0:	1192      	asrs	r2, r2, #6
 80002f2:	17db      	asrs	r3, r3, #31
 80002f4:	1ad3      	subs	r3, r2, r3
 80002f6:	4a56      	ldr	r2, [pc, #344]	; (8000450 <fsm_multi_mode_run+0x304>)
 80002f8:	6013      	str	r3, [r2, #0]
			status = SET_YEL;
 80002fa:	4b51      	ldr	r3, [pc, #324]	; (8000440 <fsm_multi_mode_run+0x2f4>)
 80002fc:	2205      	movs	r2, #5
 80002fe:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000300:	e14b      	b.n	800059a <fsm_multi_mode_run+0x44e>
	case SN_GRN__EW_RED:
		grnLight(SOUTH_NORTH);
 8000302:	2000      	movs	r0, #0
 8000304:	f000 fe58 	bl	8000fb8 <grnLight>
		redLight(EAST_WEST);
 8000308:	2001      	movs	r0, #1
 800030a:	f000 fde5 	bl	8000ed8 <redLight>
		updateCountdownBuffer();
 800030e:	f000 fb53 	bl	80009b8 <updateCountdownBuffer>
		scan7SEG();
 8000312:	f000 fbf7 	bl	8000b04 <scan7SEG>

		if(timer2_flag == 1) {
 8000316:	4b4b      	ldr	r3, [pc, #300]	; (8000444 <fsm_multi_mode_run+0x2f8>)
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	2b01      	cmp	r3, #1
 800031c:	d105      	bne.n	800032a <fsm_multi_mode_run+0x1de>
			setTimer2(SECOND);
 800031e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000322:	f000 fc55 	bl	8000bd0 <setTimer2>
			updateCountdown();
 8000326:	f000 ff5b 	bl	80011e0 <updateCountdown>
		}

		if(traffic_timer_flag == 1) {
 800032a:	4b47      	ldr	r3, [pc, #284]	; (8000448 <fsm_multi_mode_run+0x2fc>)
 800032c:	681b      	ldr	r3, [r3, #0]
 800032e:	2b01      	cmp	r3, #1
 8000330:	d10f      	bne.n	8000352 <fsm_multi_mode_run+0x206>
			setTrafficTimer(getYelTime());
 8000332:	f000 ff0b 	bl	800114c <getYelTime>
 8000336:	4603      	mov	r3, r0
 8000338:	4618      	mov	r0, r3
 800033a:	f000 fc11 	bl	8000b60 <setTrafficTimer>
			setCountdown(SOUTH_NORTH, getYelTime());
 800033e:	f000 ff05 	bl	800114c <getYelTime>
 8000342:	4603      	mov	r3, r0
 8000344:	4619      	mov	r1, r3
 8000346:	2000      	movs	r0, #0
 8000348:	f000 ff1c 	bl	8001184 <setCountdown>
			status = SN_YEL__EW_RED;
 800034c:	4b3c      	ldr	r3, [pc, #240]	; (8000440 <fsm_multi_mode_run+0x2f4>)
 800034e:	2204      	movs	r2, #4
 8000350:	701a      	strb	r2, [r3, #0]
		}

		if(is_button_pressed(CHANGE_MODE)) {
 8000352:	2000      	movs	r0, #0
 8000354:	f000 fa3e 	bl	80007d4 <is_button_pressed>
 8000358:	4603      	mov	r3, r0
 800035a:	2b00      	cmp	r3, #0
 800035c:	f000 811f 	beq.w	800059e <fsm_multi_mode_run+0x452>
			setTrafficTimer(LED_BLINK);
 8000360:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000364:	f000 fbfc 	bl	8000b60 <setTrafficTimer>
			setTimer1(TIMER_INIT);
 8000368:	200a      	movs	r0, #10
 800036a:	f000 fc15 	bl	8000b98 <setTimer1>
			reset7SEGIndex();
 800036e:	f000 fbeb 	bl	8000b48 <reset7SEGIndex>
			updateModeBuffer(MODE_YEL);
 8000372:	2002      	movs	r0, #2
 8000374:	f000 fb86 	bl	8000a84 <updateModeBuffer>
			yelBlink();
 8000378:	f000 fe56 	bl	8001028 <yelBlink>
			newYelTime = getYelTime() / SECOND;
 800037c:	f000 fee6 	bl	800114c <getYelTime>
 8000380:	4603      	mov	r3, r0
 8000382:	4a32      	ldr	r2, [pc, #200]	; (800044c <fsm_multi_mode_run+0x300>)
 8000384:	fb82 1203 	smull	r1, r2, r2, r3
 8000388:	1192      	asrs	r2, r2, #6
 800038a:	17db      	asrs	r3, r3, #31
 800038c:	1ad3      	subs	r3, r2, r3
 800038e:	4a30      	ldr	r2, [pc, #192]	; (8000450 <fsm_multi_mode_run+0x304>)
 8000390:	6013      	str	r3, [r2, #0]
			status = SET_YEL;
 8000392:	4b2b      	ldr	r3, [pc, #172]	; (8000440 <fsm_multi_mode_run+0x2f4>)
 8000394:	2205      	movs	r2, #5
 8000396:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000398:	e101      	b.n	800059e <fsm_multi_mode_run+0x452>
	case SN_YEL__EW_RED:
		yelLight(SOUTH_NORTH);
 800039a:	2000      	movs	r0, #0
 800039c:	f000 fdd4 	bl	8000f48 <yelLight>
		redLight(EAST_WEST);
 80003a0:	2001      	movs	r0, #1
 80003a2:	f000 fd99 	bl	8000ed8 <redLight>
		updateCountdownBuffer();
 80003a6:	f000 fb07 	bl	80009b8 <updateCountdownBuffer>
		scan7SEG();
 80003aa:	f000 fbab 	bl	8000b04 <scan7SEG>

		if(timer2_flag == 1) {
 80003ae:	4b25      	ldr	r3, [pc, #148]	; (8000444 <fsm_multi_mode_run+0x2f8>)
 80003b0:	681b      	ldr	r3, [r3, #0]
 80003b2:	2b01      	cmp	r3, #1
 80003b4:	d105      	bne.n	80003c2 <fsm_multi_mode_run+0x276>
			setTimer2(SECOND);
 80003b6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003ba:	f000 fc09 	bl	8000bd0 <setTimer2>
			updateCountdown();
 80003be:	f000 ff0f 	bl	80011e0 <updateCountdown>
		}

		if(traffic_timer_flag == 1) {
 80003c2:	4b21      	ldr	r3, [pc, #132]	; (8000448 <fsm_multi_mode_run+0x2fc>)
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	2b01      	cmp	r3, #1
 80003c8:	d116      	bne.n	80003f8 <fsm_multi_mode_run+0x2ac>
			setTrafficTimer(getGrnTime());
 80003ca:	f000 fecd 	bl	8001168 <getGrnTime>
 80003ce:	4603      	mov	r3, r0
 80003d0:	4618      	mov	r0, r3
 80003d2:	f000 fbc5 	bl	8000b60 <setTrafficTimer>
			setCountdown(SOUTH_NORTH, getRedTime());
 80003d6:	f000 feab 	bl	8001130 <getRedTime>
 80003da:	4603      	mov	r3, r0
 80003dc:	4619      	mov	r1, r3
 80003de:	2000      	movs	r0, #0
 80003e0:	f000 fed0 	bl	8001184 <setCountdown>
			setCountdown(EAST_WEST, getGrnTime());
 80003e4:	f000 fec0 	bl	8001168 <getGrnTime>
 80003e8:	4603      	mov	r3, r0
 80003ea:	4619      	mov	r1, r3
 80003ec:	2001      	movs	r0, #1
 80003ee:	f000 fec9 	bl	8001184 <setCountdown>
			status = SN_RED__EW_GRN;
 80003f2:	4b13      	ldr	r3, [pc, #76]	; (8000440 <fsm_multi_mode_run+0x2f4>)
 80003f4:	2201      	movs	r2, #1
 80003f6:	701a      	strb	r2, [r3, #0]
		}

		if(is_button_pressed(CHANGE_MODE)) {
 80003f8:	2000      	movs	r0, #0
 80003fa:	f000 f9eb 	bl	80007d4 <is_button_pressed>
 80003fe:	4603      	mov	r3, r0
 8000400:	2b00      	cmp	r3, #0
 8000402:	f000 80ce 	beq.w	80005a2 <fsm_multi_mode_run+0x456>
			setTrafficTimer(LED_BLINK);
 8000406:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800040a:	f000 fba9 	bl	8000b60 <setTrafficTimer>
			setTimer1(TIMER_INIT);
 800040e:	200a      	movs	r0, #10
 8000410:	f000 fbc2 	bl	8000b98 <setTimer1>
			reset7SEGIndex();
 8000414:	f000 fb98 	bl	8000b48 <reset7SEGIndex>
			updateModeBuffer(MODE_YEL);
 8000418:	2002      	movs	r0, #2
 800041a:	f000 fb33 	bl	8000a84 <updateModeBuffer>
			yelBlink();
 800041e:	f000 fe03 	bl	8001028 <yelBlink>
			newYelTime = getYelTime() / SECOND;
 8000422:	f000 fe93 	bl	800114c <getYelTime>
 8000426:	4603      	mov	r3, r0
 8000428:	4a08      	ldr	r2, [pc, #32]	; (800044c <fsm_multi_mode_run+0x300>)
 800042a:	fb82 1203 	smull	r1, r2, r2, r3
 800042e:	1192      	asrs	r2, r2, #6
 8000430:	17db      	asrs	r3, r3, #31
 8000432:	1ad3      	subs	r3, r2, r3
 8000434:	4a06      	ldr	r2, [pc, #24]	; (8000450 <fsm_multi_mode_run+0x304>)
 8000436:	6013      	str	r3, [r2, #0]
			status = SET_YEL;
 8000438:	4b01      	ldr	r3, [pc, #4]	; (8000440 <fsm_multi_mode_run+0x2f4>)
 800043a:	2205      	movs	r2, #5
 800043c:	701a      	strb	r2, [r3, #0]
		}
		break;
 800043e:	e0b0      	b.n	80005a2 <fsm_multi_mode_run+0x456>
 8000440:	200000c8 	.word	0x200000c8
 8000444:	20000100 	.word	0x20000100
 8000448:	200000ec 	.word	0x200000ec
 800044c:	10624dd3 	.word	0x10624dd3
 8000450:	200000c4 	.word	0x200000c4
	case SET_YEL:
		updateTimeBuffer(newYelTime);
 8000454:	4b56      	ldr	r3, [pc, #344]	; (80005b0 <fsm_multi_mode_run+0x464>)
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	4618      	mov	r0, r3
 800045a:	f000 faef 	bl	8000a3c <updateTimeBuffer>
		scan7SEG();
 800045e:	f000 fb51 	bl	8000b04 <scan7SEG>

		if(traffic_timer_flag == 1) {
 8000462:	4b54      	ldr	r3, [pc, #336]	; (80005b4 <fsm_multi_mode_run+0x468>)
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	2b01      	cmp	r3, #1
 8000468:	d105      	bne.n	8000476 <fsm_multi_mode_run+0x32a>
			setTrafficTimer(LED_BLINK);
 800046a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800046e:	f000 fb77 	bl	8000b60 <setTrafficTimer>
			yelBlink();
 8000472:	f000 fdd9 	bl	8001028 <yelBlink>
		}

		if(is_button_pressed(CHANGE_VALUE)) {
 8000476:	2001      	movs	r0, #1
 8000478:	f000 f9ac 	bl	80007d4 <is_button_pressed>
 800047c:	4603      	mov	r3, r0
 800047e:	2b00      	cmp	r3, #0
 8000480:	d013      	beq.n	80004aa <fsm_multi_mode_run+0x35e>
			newYelTime = (newYelTime + 1) % MAX_TIME;
 8000482:	4b4b      	ldr	r3, [pc, #300]	; (80005b0 <fsm_multi_mode_run+0x464>)
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	1c5a      	adds	r2, r3, #1
 8000488:	4b4b      	ldr	r3, [pc, #300]	; (80005b8 <fsm_multi_mode_run+0x46c>)
 800048a:	fb83 1302 	smull	r1, r3, r3, r2
 800048e:	1159      	asrs	r1, r3, #5
 8000490:	17d3      	asrs	r3, r2, #31
 8000492:	1acb      	subs	r3, r1, r3
 8000494:	2164      	movs	r1, #100	; 0x64
 8000496:	fb01 f303 	mul.w	r3, r1, r3
 800049a:	1ad3      	subs	r3, r2, r3
 800049c:	4a44      	ldr	r2, [pc, #272]	; (80005b0 <fsm_multi_mode_run+0x464>)
 800049e:	6013      	str	r3, [r2, #0]
			updateTimeBuffer(newYelTime);
 80004a0:	4b43      	ldr	r3, [pc, #268]	; (80005b0 <fsm_multi_mode_run+0x464>)
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	4618      	mov	r0, r3
 80004a6:	f000 fac9 	bl	8000a3c <updateTimeBuffer>
		}

		if(is_button_pressed(SET_VALUE)) {
 80004aa:	2002      	movs	r0, #2
 80004ac:	f000 f992 	bl	80007d4 <is_button_pressed>
 80004b0:	4603      	mov	r3, r0
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d006      	beq.n	80004c4 <fsm_multi_mode_run+0x378>
			updateYelTime(newYelTime);
 80004b6:	4b3e      	ldr	r3, [pc, #248]	; (80005b0 <fsm_multi_mode_run+0x464>)
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	4618      	mov	r0, r3
 80004bc:	f000 fedc 	bl	8001278 <updateYelTime>
			updateRedTime();
 80004c0:	f000 fec6 	bl	8001250 <updateRedTime>
		}

		if(is_button_pressed(CHANGE_MODE)) {
 80004c4:	2000      	movs	r0, #0
 80004c6:	f000 f985 	bl	80007d4 <is_button_pressed>
 80004ca:	4603      	mov	r3, r0
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d06a      	beq.n	80005a6 <fsm_multi_mode_run+0x45a>
			setTrafficTimer(LED_BLINK);
 80004d0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80004d4:	f000 fb44 	bl	8000b60 <setTrafficTimer>
			setTimer1(TIMER_INIT);
 80004d8:	200a      	movs	r0, #10
 80004da:	f000 fb5d 	bl	8000b98 <setTimer1>
			reset7SEGIndex();
 80004de:	f000 fb33 	bl	8000b48 <reset7SEGIndex>
			updateModeBuffer(MODE_GRN);
 80004e2:	2003      	movs	r0, #3
 80004e4:	f000 face 	bl	8000a84 <updateModeBuffer>
			grnBlink();
 80004e8:	f000 fde0 	bl	80010ac <grnBlink>
			newGrnTime = getGrnTime() / SECOND;
 80004ec:	f000 fe3c 	bl	8001168 <getGrnTime>
 80004f0:	4603      	mov	r3, r0
 80004f2:	4a32      	ldr	r2, [pc, #200]	; (80005bc <fsm_multi_mode_run+0x470>)
 80004f4:	fb82 1203 	smull	r1, r2, r2, r3
 80004f8:	1192      	asrs	r2, r2, #6
 80004fa:	17db      	asrs	r3, r3, #31
 80004fc:	1ad3      	subs	r3, r2, r3
 80004fe:	4a30      	ldr	r2, [pc, #192]	; (80005c0 <fsm_multi_mode_run+0x474>)
 8000500:	6013      	str	r3, [r2, #0]
			status = SET_GRN;
 8000502:	4b30      	ldr	r3, [pc, #192]	; (80005c4 <fsm_multi_mode_run+0x478>)
 8000504:	2206      	movs	r2, #6
 8000506:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000508:	e04d      	b.n	80005a6 <fsm_multi_mode_run+0x45a>
	case SET_GRN:
		updateTimeBuffer(newGrnTime);
 800050a:	4b2d      	ldr	r3, [pc, #180]	; (80005c0 <fsm_multi_mode_run+0x474>)
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	4618      	mov	r0, r3
 8000510:	f000 fa94 	bl	8000a3c <updateTimeBuffer>
		scan7SEG();
 8000514:	f000 faf6 	bl	8000b04 <scan7SEG>

		if(traffic_timer_flag == 1) {
 8000518:	4b26      	ldr	r3, [pc, #152]	; (80005b4 <fsm_multi_mode_run+0x468>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	2b01      	cmp	r3, #1
 800051e:	d105      	bne.n	800052c <fsm_multi_mode_run+0x3e0>
			setTrafficTimer(LED_BLINK);
 8000520:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000524:	f000 fb1c 	bl	8000b60 <setTrafficTimer>
			grnBlink();
 8000528:	f000 fdc0 	bl	80010ac <grnBlink>
		}

		if(is_button_pressed(CHANGE_VALUE)) {
 800052c:	2001      	movs	r0, #1
 800052e:	f000 f951 	bl	80007d4 <is_button_pressed>
 8000532:	4603      	mov	r3, r0
 8000534:	2b00      	cmp	r3, #0
 8000536:	d013      	beq.n	8000560 <fsm_multi_mode_run+0x414>
			newGrnTime = (newGrnTime + 1) % MAX_TIME;
 8000538:	4b21      	ldr	r3, [pc, #132]	; (80005c0 <fsm_multi_mode_run+0x474>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	1c5a      	adds	r2, r3, #1
 800053e:	4b1e      	ldr	r3, [pc, #120]	; (80005b8 <fsm_multi_mode_run+0x46c>)
 8000540:	fb83 1302 	smull	r1, r3, r3, r2
 8000544:	1159      	asrs	r1, r3, #5
 8000546:	17d3      	asrs	r3, r2, #31
 8000548:	1acb      	subs	r3, r1, r3
 800054a:	2164      	movs	r1, #100	; 0x64
 800054c:	fb01 f303 	mul.w	r3, r1, r3
 8000550:	1ad3      	subs	r3, r2, r3
 8000552:	4a1b      	ldr	r2, [pc, #108]	; (80005c0 <fsm_multi_mode_run+0x474>)
 8000554:	6013      	str	r3, [r2, #0]
			updateTimeBuffer(newGrnTime);
 8000556:	4b1a      	ldr	r3, [pc, #104]	; (80005c0 <fsm_multi_mode_run+0x474>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	4618      	mov	r0, r3
 800055c:	f000 fa6e 	bl	8000a3c <updateTimeBuffer>
		}

		if(is_button_pressed(SET_VALUE)) {
 8000560:	2002      	movs	r0, #2
 8000562:	f000 f937 	bl	80007d4 <is_button_pressed>
 8000566:	4603      	mov	r3, r0
 8000568:	2b00      	cmp	r3, #0
 800056a:	d006      	beq.n	800057a <fsm_multi_mode_run+0x42e>
			updateGrnTime(newGrnTime);
 800056c:	4b14      	ldr	r3, [pc, #80]	; (80005c0 <fsm_multi_mode_run+0x474>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	4618      	mov	r0, r3
 8000572:	f000 fe8f 	bl	8001294 <updateGrnTime>
			updateRedTime();
 8000576:	f000 fe6b 	bl	8001250 <updateRedTime>
		}

		if(is_button_pressed(CHANGE_MODE)) {
 800057a:	2000      	movs	r0, #0
 800057c:	f000 f92a 	bl	80007d4 <is_button_pressed>
 8000580:	4603      	mov	r3, r0
 8000582:	2b00      	cmp	r3, #0
 8000584:	d011      	beq.n	80005aa <fsm_multi_mode_run+0x45e>
			reset7SEGIndex();
 8000586:	f000 fadf 	bl	8000b48 <reset7SEGIndex>
			status = INIT;
 800058a:	4b0e      	ldr	r3, [pc, #56]	; (80005c4 <fsm_multi_mode_run+0x478>)
 800058c:	2200      	movs	r2, #0
 800058e:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000590:	e00b      	b.n	80005aa <fsm_multi_mode_run+0x45e>
	default: break;
 8000592:	bf00      	nop
 8000594:	e00a      	b.n	80005ac <fsm_multi_mode_run+0x460>
		break;
 8000596:	bf00      	nop
 8000598:	e008      	b.n	80005ac <fsm_multi_mode_run+0x460>
		break;
 800059a:	bf00      	nop
 800059c:	e006      	b.n	80005ac <fsm_multi_mode_run+0x460>
		break;
 800059e:	bf00      	nop
 80005a0:	e004      	b.n	80005ac <fsm_multi_mode_run+0x460>
		break;
 80005a2:	bf00      	nop
 80005a4:	e002      	b.n	80005ac <fsm_multi_mode_run+0x460>
		break;
 80005a6:	bf00      	nop
 80005a8:	e000      	b.n	80005ac <fsm_multi_mode_run+0x460>
		break;
 80005aa:	bf00      	nop
	}
}
 80005ac:	bf00      	nop
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	200000c4 	.word	0x200000c4
 80005b4:	200000ec 	.word	0x200000ec
 80005b8:	51eb851f 	.word	0x51eb851f
 80005bc:	10624dd3 	.word	0x10624dd3
 80005c0:	200000c0 	.word	0x200000c0
 80005c4:	200000c8 	.word	0x200000c8

080005c8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b086      	sub	sp, #24
 80005cc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ce:	f107 0308 	add.w	r3, r7, #8
 80005d2:	2200      	movs	r2, #0
 80005d4:	601a      	str	r2, [r3, #0]
 80005d6:	605a      	str	r2, [r3, #4]
 80005d8:	609a      	str	r2, [r3, #8]
 80005da:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005dc:	4b28      	ldr	r3, [pc, #160]	; (8000680 <MX_GPIO_Init+0xb8>)
 80005de:	699b      	ldr	r3, [r3, #24]
 80005e0:	4a27      	ldr	r2, [pc, #156]	; (8000680 <MX_GPIO_Init+0xb8>)
 80005e2:	f043 0304 	orr.w	r3, r3, #4
 80005e6:	6193      	str	r3, [r2, #24]
 80005e8:	4b25      	ldr	r3, [pc, #148]	; (8000680 <MX_GPIO_Init+0xb8>)
 80005ea:	699b      	ldr	r3, [r3, #24]
 80005ec:	f003 0304 	and.w	r3, r3, #4
 80005f0:	607b      	str	r3, [r7, #4]
 80005f2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005f4:	4b22      	ldr	r3, [pc, #136]	; (8000680 <MX_GPIO_Init+0xb8>)
 80005f6:	699b      	ldr	r3, [r3, #24]
 80005f8:	4a21      	ldr	r2, [pc, #132]	; (8000680 <MX_GPIO_Init+0xb8>)
 80005fa:	f043 0308 	orr.w	r3, r3, #8
 80005fe:	6193      	str	r3, [r2, #24]
 8000600:	4b1f      	ldr	r3, [pc, #124]	; (8000680 <MX_GPIO_Init+0xb8>)
 8000602:	699b      	ldr	r3, [r3, #24]
 8000604:	f003 0308 	and.w	r3, r3, #8
 8000608:	603b      	str	r3, [r7, #0]
 800060a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
 800060c:	2200      	movs	r2, #0
 800060e:	f640 71de 	movw	r1, #4062	; 0xfde
 8000612:	481c      	ldr	r0, [pc, #112]	; (8000684 <MX_GPIO_Init+0xbc>)
 8000614:	f001 f975 	bl	8001902 <HAL_GPIO_WritePin>
                          |RED_0_Pin|YEL_0_Pin|GRN_0_Pin|RED_1_Pin
                          |YEL_1_Pin|GRN_1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG6_Pin|SEG0_Pin|SEG1_Pin|SEG2_Pin
 8000618:	2200      	movs	r2, #0
 800061a:	f44f 61fe 	mov.w	r1, #2032	; 0x7f0
 800061e:	481a      	ldr	r0, [pc, #104]	; (8000688 <MX_GPIO_Init+0xc0>)
 8000620:	f001 f96f 	bl	8001902 <HAL_GPIO_WritePin>
                          |SEG3_Pin|SEG4_Pin|SEG5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin PAPin PAPin
                           PAPin PAPin */
  GPIO_InitStruct.Pin = EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
 8000624:	f640 73de 	movw	r3, #4062	; 0xfde
 8000628:	60bb      	str	r3, [r7, #8]
                          |RED_0_Pin|YEL_0_Pin|GRN_0_Pin|RED_1_Pin
                          |YEL_1_Pin|GRN_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800062a:	2301      	movs	r3, #1
 800062c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062e:	2300      	movs	r3, #0
 8000630:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000632:	2302      	movs	r3, #2
 8000634:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000636:	f107 0308 	add.w	r3, r7, #8
 800063a:	4619      	mov	r1, r3
 800063c:	4811      	ldr	r0, [pc, #68]	; (8000684 <MX_GPIO_Init+0xbc>)
 800063e:	f000 ffcd 	bl	80015dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = BTN_0_Pin|BTN_1_Pin|BTN_2_Pin;
 8000642:	2307      	movs	r3, #7
 8000644:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000646:	2300      	movs	r3, #0
 8000648:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800064a:	2300      	movs	r3, #0
 800064c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800064e:	f107 0308 	add.w	r3, r7, #8
 8000652:	4619      	mov	r1, r3
 8000654:	480c      	ldr	r0, [pc, #48]	; (8000688 <MX_GPIO_Init+0xc0>)
 8000656:	f000 ffc1 	bl	80015dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = SEG6_Pin|SEG0_Pin|SEG1_Pin|SEG2_Pin
 800065a:	f44f 63fe 	mov.w	r3, #2032	; 0x7f0
 800065e:	60bb      	str	r3, [r7, #8]
                          |SEG3_Pin|SEG4_Pin|SEG5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000660:	2301      	movs	r3, #1
 8000662:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000664:	2300      	movs	r3, #0
 8000666:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000668:	2302      	movs	r3, #2
 800066a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800066c:	f107 0308 	add.w	r3, r7, #8
 8000670:	4619      	mov	r1, r3
 8000672:	4805      	ldr	r0, [pc, #20]	; (8000688 <MX_GPIO_Init+0xc0>)
 8000674:	f000 ffb2 	bl	80015dc <HAL_GPIO_Init>

}
 8000678:	bf00      	nop
 800067a:	3718      	adds	r7, #24
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	40021000 	.word	0x40021000
 8000684:	40010800 	.word	0x40010800
 8000688:	40010c00 	.word	0x40010c00

0800068c <button_reading>:
static uint8_t flagForButtonPressed[NO_OF_BUTTONS];
//we define counter for automatically increasing the value
//after the button is pressed more than 1 second.
static uint16_t counterForButtonHold[NO_OF_BUTTONS] = {0, 0, 0};

void button_reading(void){
 800068c:	b580      	push	{r7, lr}
 800068e:	b082      	sub	sp, #8
 8000690:	af00      	add	r7, sp, #0
	for(int i = 0; i < NO_OF_BUTTONS; i++) {
 8000692:	2300      	movs	r3, #0
 8000694:	607b      	str	r3, [r7, #4]
 8000696:	e082      	b.n	800079e <button_reading+0x112>
		debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 8000698:	4a45      	ldr	r2, [pc, #276]	; (80007b0 <button_reading+0x124>)
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	4413      	add	r3, r2
 800069e:	7819      	ldrb	r1, [r3, #0]
 80006a0:	4a44      	ldr	r2, [pc, #272]	; (80007b4 <button_reading+0x128>)
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	4413      	add	r3, r2
 80006a6:	460a      	mov	r2, r1
 80006a8:	701a      	strb	r2, [r3, #0]
		debounceButtonBuffer1[i] = debounceButtonBuffer0[i];
 80006aa:	4a43      	ldr	r2, [pc, #268]	; (80007b8 <button_reading+0x12c>)
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	4413      	add	r3, r2
 80006b0:	7819      	ldrb	r1, [r3, #0]
 80006b2:	4a3f      	ldr	r2, [pc, #252]	; (80007b0 <button_reading+0x124>)
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	4413      	add	r3, r2
 80006b8:	460a      	mov	r2, r1
 80006ba:	701a      	strb	r2, [r3, #0]
		debounceButtonBuffer0[i] = HAL_GPIO_ReadPin(buttonPort[i], buttonPin[i]);
 80006bc:	4a3f      	ldr	r2, [pc, #252]	; (80007bc <button_reading+0x130>)
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80006c4:	493e      	ldr	r1, [pc, #248]	; (80007c0 <button_reading+0x134>)
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80006cc:	4619      	mov	r1, r3
 80006ce:	4610      	mov	r0, r2
 80006d0:	f001 f900 	bl	80018d4 <HAL_GPIO_ReadPin>
 80006d4:	4603      	mov	r3, r0
 80006d6:	4619      	mov	r1, r3
 80006d8:	4a37      	ldr	r2, [pc, #220]	; (80007b8 <button_reading+0x12c>)
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	4413      	add	r3, r2
 80006de:	460a      	mov	r2, r1
 80006e0:	701a      	strb	r2, [r3, #0]
		if((debounceButtonBuffer2[i] == debounceButtonBuffer1[i]) || (debounceButtonBuffer1[i] == debounceButtonBuffer0[i])) {
 80006e2:	4a34      	ldr	r2, [pc, #208]	; (80007b4 <button_reading+0x128>)
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	4413      	add	r3, r2
 80006e8:	781a      	ldrb	r2, [r3, #0]
 80006ea:	4931      	ldr	r1, [pc, #196]	; (80007b0 <button_reading+0x124>)
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	440b      	add	r3, r1
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	429a      	cmp	r2, r3
 80006f4:	d009      	beq.n	800070a <button_reading+0x7e>
 80006f6:	4a2e      	ldr	r2, [pc, #184]	; (80007b0 <button_reading+0x124>)
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	4413      	add	r3, r2
 80006fc:	781a      	ldrb	r2, [r3, #0]
 80006fe:	492e      	ldr	r1, [pc, #184]	; (80007b8 <button_reading+0x12c>)
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	440b      	add	r3, r1
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	429a      	cmp	r2, r3
 8000708:	d146      	bne.n	8000798 <button_reading+0x10c>
			if(buttonBuffer[i] != debounceButtonBuffer0[i]) {
 800070a:	4a2e      	ldr	r2, [pc, #184]	; (80007c4 <button_reading+0x138>)
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	4413      	add	r3, r2
 8000710:	781a      	ldrb	r2, [r3, #0]
 8000712:	4929      	ldr	r1, [pc, #164]	; (80007b8 <button_reading+0x12c>)
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	440b      	add	r3, r1
 8000718:	781b      	ldrb	r3, [r3, #0]
 800071a:	429a      	cmp	r2, r3
 800071c:	d027      	beq.n	800076e <button_reading+0xe2>
				buttonBuffer[i] = debounceButtonBuffer0[i];
 800071e:	4a26      	ldr	r2, [pc, #152]	; (80007b8 <button_reading+0x12c>)
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	4413      	add	r3, r2
 8000724:	7819      	ldrb	r1, [r3, #0]
 8000726:	4a27      	ldr	r2, [pc, #156]	; (80007c4 <button_reading+0x138>)
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	4413      	add	r3, r2
 800072c:	460a      	mov	r2, r1
 800072e:	701a      	strb	r2, [r3, #0]
				if(buttonBuffer[i] == BUTTON_IS_PRESSED) {
 8000730:	4a24      	ldr	r2, [pc, #144]	; (80007c4 <button_reading+0x138>)
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	4413      	add	r3, r2
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	2b00      	cmp	r3, #0
 800073a:	d12d      	bne.n	8000798 <button_reading+0x10c>
					counterForButtonHold[i] = DURATION_FOR_AUTO_INCREASING;
 800073c:	4a22      	ldr	r2, [pc, #136]	; (80007c8 <button_reading+0x13c>)
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000744:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					if(SYSTEM_DELAY > 0) counterForButtonHold[i] /= SYSTEM_DELAY;
 8000748:	4a1f      	ldr	r2, [pc, #124]	; (80007c8 <button_reading+0x13c>)
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000750:	4a1e      	ldr	r2, [pc, #120]	; (80007cc <button_reading+0x140>)
 8000752:	fba2 2303 	umull	r2, r3, r2, r3
 8000756:	08db      	lsrs	r3, r3, #3
 8000758:	b299      	uxth	r1, r3
 800075a:	4a1b      	ldr	r2, [pc, #108]	; (80007c8 <button_reading+0x13c>)
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					flagForButtonPressed[i] = 1;
 8000762:	4a1b      	ldr	r2, [pc, #108]	; (80007d0 <button_reading+0x144>)
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	4413      	add	r3, r2
 8000768:	2201      	movs	r2, #1
 800076a:	701a      	strb	r2, [r3, #0]
 800076c:	e014      	b.n	8000798 <button_reading+0x10c>
				}
			}
			else {
				counterForButtonHold[i]--;
 800076e:	4a16      	ldr	r2, [pc, #88]	; (80007c8 <button_reading+0x13c>)
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000776:	3b01      	subs	r3, #1
 8000778:	b299      	uxth	r1, r3
 800077a:	4a13      	ldr	r2, [pc, #76]	; (80007c8 <button_reading+0x13c>)
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				if(counterForButtonHold[i] == 0) {
 8000782:	4a11      	ldr	r2, [pc, #68]	; (80007c8 <button_reading+0x13c>)
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800078a:	2b00      	cmp	r3, #0
 800078c:	d104      	bne.n	8000798 <button_reading+0x10c>
					buttonBuffer[i] = BUTTON_IS_RELEASED;
 800078e:	4a0d      	ldr	r2, [pc, #52]	; (80007c4 <button_reading+0x138>)
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	4413      	add	r3, r2
 8000794:	2201      	movs	r2, #1
 8000796:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < NO_OF_BUTTONS; i++) {
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	3301      	adds	r3, #1
 800079c:	607b      	str	r3, [r7, #4]
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	2b02      	cmp	r3, #2
 80007a2:	f77f af79 	ble.w	8000698 <button_reading+0xc>
				}
			}
		}
	}
}
 80007a6:	bf00      	nop
 80007a8:	bf00      	nop
 80007aa:	3708      	adds	r7, #8
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	2000001c 	.word	0x2000001c
 80007b4:	20000020 	.word	0x20000020
 80007b8:	20000018 	.word	0x20000018
 80007bc:	20000000 	.word	0x20000000
 80007c0:	2000000c 	.word	0x2000000c
 80007c4:	20000014 	.word	0x20000014
 80007c8:	200000d0 	.word	0x200000d0
 80007cc:	cccccccd 	.word	0xcccccccd
 80007d0:	200000cc 	.word	0x200000cc

080007d4 <is_button_pressed>:

int is_button_pressed(int index){
 80007d4:	b480      	push	{r7}
 80007d6:	b083      	sub	sp, #12
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
	if(index < 0 || index > NO_OF_BUTTONS) return -1;
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	2b00      	cmp	r3, #0
 80007e0:	db02      	blt.n	80007e8 <is_button_pressed+0x14>
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	2b03      	cmp	r3, #3
 80007e6:	dd02      	ble.n	80007ee <is_button_pressed+0x1a>
 80007e8:	f04f 33ff 	mov.w	r3, #4294967295
 80007ec:	e00d      	b.n	800080a <is_button_pressed+0x36>
	if(flagForButtonPressed[index] == 1) {
 80007ee:	4a09      	ldr	r2, [pc, #36]	; (8000814 <is_button_pressed+0x40>)
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	4413      	add	r3, r2
 80007f4:	781b      	ldrb	r3, [r3, #0]
 80007f6:	2b01      	cmp	r3, #1
 80007f8:	d106      	bne.n	8000808 <is_button_pressed+0x34>
		flagForButtonPressed[index] = 0;
 80007fa:	4a06      	ldr	r2, [pc, #24]	; (8000814 <is_button_pressed+0x40>)
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	4413      	add	r3, r2
 8000800:	2200      	movs	r2, #0
 8000802:	701a      	strb	r2, [r3, #0]
		return 1;
 8000804:	2301      	movs	r3, #1
 8000806:	e000      	b.n	800080a <is_button_pressed+0x36>
	}
	return 0;
 8000808:	2300      	movs	r3, #0
}
 800080a:	4618      	mov	r0, r3
 800080c:	370c      	adds	r7, #12
 800080e:	46bd      	mov	sp, r7
 8000810:	bc80      	pop	{r7}
 8000812:	4770      	bx	lr
 8000814:	200000cc 	.word	0x200000cc

08000818 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800081c:	f000 fd6e 	bl	80012fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000820:	f000 f80c 	bl	800083c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000824:	f7ff fed0 	bl	80005c8 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000828:	f000 faae 	bl	8000d88 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 800082c:	4802      	ldr	r0, [pc, #8]	; (8000838 <main+0x20>)
 800082e:	f001 fcd1 	bl	80021d4 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  fsm_multi_mode_run();
 8000832:	f7ff fc8b 	bl	800014c <fsm_multi_mode_run>
 8000836:	e7fc      	b.n	8000832 <main+0x1a>
 8000838:	2000010c 	.word	0x2000010c

0800083c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b090      	sub	sp, #64	; 0x40
 8000840:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000842:	f107 0318 	add.w	r3, r7, #24
 8000846:	2228      	movs	r2, #40	; 0x28
 8000848:	2100      	movs	r1, #0
 800084a:	4618      	mov	r0, r3
 800084c:	f002 f87a 	bl	8002944 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000850:	1d3b      	adds	r3, r7, #4
 8000852:	2200      	movs	r2, #0
 8000854:	601a      	str	r2, [r3, #0]
 8000856:	605a      	str	r2, [r3, #4]
 8000858:	609a      	str	r2, [r3, #8]
 800085a:	60da      	str	r2, [r3, #12]
 800085c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800085e:	2302      	movs	r3, #2
 8000860:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000862:	2301      	movs	r3, #1
 8000864:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000866:	2310      	movs	r3, #16
 8000868:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800086a:	2300      	movs	r3, #0
 800086c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800086e:	f107 0318 	add.w	r3, r7, #24
 8000872:	4618      	mov	r0, r3
 8000874:	f001 f876 	bl	8001964 <HAL_RCC_OscConfig>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800087e:	f000 f829 	bl	80008d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000882:	230f      	movs	r3, #15
 8000884:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000886:	2300      	movs	r3, #0
 8000888:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800088a:	2300      	movs	r3, #0
 800088c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800088e:	2300      	movs	r3, #0
 8000890:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000892:	2300      	movs	r3, #0
 8000894:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000896:	1d3b      	adds	r3, r7, #4
 8000898:	2100      	movs	r1, #0
 800089a:	4618      	mov	r0, r3
 800089c:	f001 fae4 	bl	8001e68 <HAL_RCC_ClockConfig>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80008a6:	f000 f815 	bl	80008d4 <Error_Handler>
  }
}
 80008aa:	bf00      	nop
 80008ac:	3740      	adds	r7, #64	; 0x40
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}

080008b2 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80008b2:	b580      	push	{r7, lr}
 80008b4:	b082      	sub	sp, #8
 80008b6:	af00      	add	r7, sp, #0
 80008b8:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2) {
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80008c2:	d103      	bne.n	80008cc <HAL_TIM_PeriodElapsedCallback+0x1a>
		button_reading();
 80008c4:	f7ff fee2 	bl	800068c <button_reading>
		timerRun();
 80008c8:	f000 f99e 	bl	8000c08 <timerRun>
	}
}
 80008cc:	bf00      	nop
 80008ce:	3708      	adds	r7, #8
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}

080008d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008d8:	b672      	cpsid	i
}
 80008da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008dc:	e7fe      	b.n	80008dc <Error_Handler+0x8>
	...

080008e0 <driver7SEG>:
//seven segment buffer
int seven_seg_buffer[MAX_7SEG_LEDS];
int seven_seg_index = 0;

//seven segment functions
void driver7SEG(int num) {
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b084      	sub	sp, #16
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
	if(num < 0 || num > 9) return;
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	db23      	blt.n	8000936 <driver7SEG+0x56>
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	2b09      	cmp	r3, #9
 80008f2:	dc20      	bgt.n	8000936 <driver7SEG+0x56>
	for(int i = 0; i < NO_OF_SEGMENTS; i++) {
 80008f4:	2300      	movs	r3, #0
 80008f6:	60fb      	str	r3, [r7, #12]
 80008f8:	e019      	b.n	800092e <driver7SEG+0x4e>
		HAL_GPIO_WritePin(sevenSegPort[i], sevenSegPin[i], (sevenSegValue[num] >> i) & 0x01);
 80008fa:	4a11      	ldr	r2, [pc, #68]	; (8000940 <driver7SEG+0x60>)
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000902:	4a10      	ldr	r2, [pc, #64]	; (8000944 <driver7SEG+0x64>)
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800090a:	4a0f      	ldr	r2, [pc, #60]	; (8000948 <driver7SEG+0x68>)
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	4413      	add	r3, r2
 8000910:	781b      	ldrb	r3, [r3, #0]
 8000912:	461a      	mov	r2, r3
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	fa42 f303 	asr.w	r3, r2, r3
 800091a:	b2db      	uxtb	r3, r3
 800091c:	f003 0301 	and.w	r3, r3, #1
 8000920:	b2db      	uxtb	r3, r3
 8000922:	461a      	mov	r2, r3
 8000924:	f000 ffed 	bl	8001902 <HAL_GPIO_WritePin>
	for(int i = 0; i < NO_OF_SEGMENTS; i++) {
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	3301      	adds	r3, #1
 800092c:	60fb      	str	r3, [r7, #12]
 800092e:	68fb      	ldr	r3, [r7, #12]
 8000930:	2b06      	cmp	r3, #6
 8000932:	dde2      	ble.n	80008fa <driver7SEG+0x1a>
 8000934:	e000      	b.n	8000938 <driver7SEG+0x58>
	if(num < 0 || num > 9) return;
 8000936:	bf00      	nop
	}
}
 8000938:	3710      	adds	r7, #16
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	20000024 	.word	0x20000024
 8000944:	20000040 	.word	0x20000040
 8000948:	0800297c 	.word	0x0800297c

0800094c <enable7SEG>:

void enable7SEG(int index) {
 800094c:	b580      	push	{r7, lr}
 800094e:	b084      	sub	sp, #16
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
	if(index < 0 || index >= MAX_7SEG_LEDS) return;
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	2b00      	cmp	r3, #0
 8000958:	db23      	blt.n	80009a2 <enable7SEG+0x56>
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	2b03      	cmp	r3, #3
 800095e:	dc20      	bgt.n	80009a2 <enable7SEG+0x56>
	for(int i = 0; i < MAX_7SEG_LEDS; i++) {
 8000960:	2300      	movs	r3, #0
 8000962:	60fb      	str	r3, [r7, #12]
 8000964:	e019      	b.n	800099a <enable7SEG+0x4e>
		HAL_GPIO_WritePin(enablePort[i], enablePin[i], (sevenSegEnable[index] >> i) & 0x01);
 8000966:	4a11      	ldr	r2, [pc, #68]	; (80009ac <enable7SEG+0x60>)
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800096e:	4a10      	ldr	r2, [pc, #64]	; (80009b0 <enable7SEG+0x64>)
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000976:	4a0f      	ldr	r2, [pc, #60]	; (80009b4 <enable7SEG+0x68>)
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	4413      	add	r3, r2
 800097c:	781b      	ldrb	r3, [r3, #0]
 800097e:	461a      	mov	r2, r3
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	fa42 f303 	asr.w	r3, r2, r3
 8000986:	b2db      	uxtb	r3, r3
 8000988:	f003 0301 	and.w	r3, r3, #1
 800098c:	b2db      	uxtb	r3, r3
 800098e:	461a      	mov	r2, r3
 8000990:	f000 ffb7 	bl	8001902 <HAL_GPIO_WritePin>
	for(int i = 0; i < MAX_7SEG_LEDS; i++) {
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	3301      	adds	r3, #1
 8000998:	60fb      	str	r3, [r7, #12]
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	2b03      	cmp	r3, #3
 800099e:	dde2      	ble.n	8000966 <enable7SEG+0x1a>
 80009a0:	e000      	b.n	80009a4 <enable7SEG+0x58>
	if(index < 0 || index >= MAX_7SEG_LEDS) return;
 80009a2:	bf00      	nop
	}
}
 80009a4:	3710      	adds	r7, #16
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	20000050 	.word	0x20000050
 80009b0:	20000060 	.word	0x20000060
 80009b4:	08002988 	.word	0x08002988

080009b8 <updateCountdownBuffer>:

void updateCountdownBuffer(void) {
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
	seven_seg_buffer[FIRST_ELEM] = getCountdown(SOUTH_NORTH) / 10;
 80009bc:	2000      	movs	r0, #0
 80009be:	f000 fc2b 	bl	8001218 <getCountdown>
 80009c2:	4603      	mov	r3, r0
 80009c4:	4a1b      	ldr	r2, [pc, #108]	; (8000a34 <updateCountdownBuffer+0x7c>)
 80009c6:	fb82 1203 	smull	r1, r2, r2, r3
 80009ca:	1092      	asrs	r2, r2, #2
 80009cc:	17db      	asrs	r3, r3, #31
 80009ce:	1ad3      	subs	r3, r2, r3
 80009d0:	4a19      	ldr	r2, [pc, #100]	; (8000a38 <updateCountdownBuffer+0x80>)
 80009d2:	6013      	str	r3, [r2, #0]
	seven_seg_buffer[SECOND_ELEM] = getCountdown(SOUTH_NORTH) % 10;
 80009d4:	2000      	movs	r0, #0
 80009d6:	f000 fc1f 	bl	8001218 <getCountdown>
 80009da:	4601      	mov	r1, r0
 80009dc:	4b15      	ldr	r3, [pc, #84]	; (8000a34 <updateCountdownBuffer+0x7c>)
 80009de:	fb83 2301 	smull	r2, r3, r3, r1
 80009e2:	109a      	asrs	r2, r3, #2
 80009e4:	17cb      	asrs	r3, r1, #31
 80009e6:	1ad2      	subs	r2, r2, r3
 80009e8:	4613      	mov	r3, r2
 80009ea:	009b      	lsls	r3, r3, #2
 80009ec:	4413      	add	r3, r2
 80009ee:	005b      	lsls	r3, r3, #1
 80009f0:	1aca      	subs	r2, r1, r3
 80009f2:	4b11      	ldr	r3, [pc, #68]	; (8000a38 <updateCountdownBuffer+0x80>)
 80009f4:	605a      	str	r2, [r3, #4]
	seven_seg_buffer[THIRD_ELEM] = getCountdown(EAST_WEST) / 10;
 80009f6:	2001      	movs	r0, #1
 80009f8:	f000 fc0e 	bl	8001218 <getCountdown>
 80009fc:	4603      	mov	r3, r0
 80009fe:	4a0d      	ldr	r2, [pc, #52]	; (8000a34 <updateCountdownBuffer+0x7c>)
 8000a00:	fb82 1203 	smull	r1, r2, r2, r3
 8000a04:	1092      	asrs	r2, r2, #2
 8000a06:	17db      	asrs	r3, r3, #31
 8000a08:	1ad3      	subs	r3, r2, r3
 8000a0a:	4a0b      	ldr	r2, [pc, #44]	; (8000a38 <updateCountdownBuffer+0x80>)
 8000a0c:	6093      	str	r3, [r2, #8]
	seven_seg_buffer[FOURTH_ELEM] = getCountdown(EAST_WEST) % 10;
 8000a0e:	2001      	movs	r0, #1
 8000a10:	f000 fc02 	bl	8001218 <getCountdown>
 8000a14:	4601      	mov	r1, r0
 8000a16:	4b07      	ldr	r3, [pc, #28]	; (8000a34 <updateCountdownBuffer+0x7c>)
 8000a18:	fb83 2301 	smull	r2, r3, r3, r1
 8000a1c:	109a      	asrs	r2, r3, #2
 8000a1e:	17cb      	asrs	r3, r1, #31
 8000a20:	1ad2      	subs	r2, r2, r3
 8000a22:	4613      	mov	r3, r2
 8000a24:	009b      	lsls	r3, r3, #2
 8000a26:	4413      	add	r3, r2
 8000a28:	005b      	lsls	r3, r3, #1
 8000a2a:	1aca      	subs	r2, r1, r3
 8000a2c:	4b02      	ldr	r3, [pc, #8]	; (8000a38 <updateCountdownBuffer+0x80>)
 8000a2e:	60da      	str	r2, [r3, #12]
}
 8000a30:	bf00      	nop
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	66666667 	.word	0x66666667
 8000a38:	200000d8 	.word	0x200000d8

08000a3c <updateTimeBuffer>:

void updateTimeBuffer(int time) {
 8000a3c:	b480      	push	{r7}
 8000a3e:	b083      	sub	sp, #12
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
	seven_seg_buffer[FIRST_ELEM] = time / 10;
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	4a0d      	ldr	r2, [pc, #52]	; (8000a7c <updateTimeBuffer+0x40>)
 8000a48:	fb82 1203 	smull	r1, r2, r2, r3
 8000a4c:	1092      	asrs	r2, r2, #2
 8000a4e:	17db      	asrs	r3, r3, #31
 8000a50:	1ad3      	subs	r3, r2, r3
 8000a52:	4a0b      	ldr	r2, [pc, #44]	; (8000a80 <updateTimeBuffer+0x44>)
 8000a54:	6013      	str	r3, [r2, #0]
	seven_seg_buffer[SECOND_ELEM] = time % 10;
 8000a56:	6879      	ldr	r1, [r7, #4]
 8000a58:	4b08      	ldr	r3, [pc, #32]	; (8000a7c <updateTimeBuffer+0x40>)
 8000a5a:	fb83 2301 	smull	r2, r3, r3, r1
 8000a5e:	109a      	asrs	r2, r3, #2
 8000a60:	17cb      	asrs	r3, r1, #31
 8000a62:	1ad2      	subs	r2, r2, r3
 8000a64:	4613      	mov	r3, r2
 8000a66:	009b      	lsls	r3, r3, #2
 8000a68:	4413      	add	r3, r2
 8000a6a:	005b      	lsls	r3, r3, #1
 8000a6c:	1aca      	subs	r2, r1, r3
 8000a6e:	4b04      	ldr	r3, [pc, #16]	; (8000a80 <updateTimeBuffer+0x44>)
 8000a70:	605a      	str	r2, [r3, #4]
}
 8000a72:	bf00      	nop
 8000a74:	370c      	adds	r7, #12
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bc80      	pop	{r7}
 8000a7a:	4770      	bx	lr
 8000a7c:	66666667 	.word	0x66666667
 8000a80:	200000d8 	.word	0x200000d8

08000a84 <updateModeBuffer>:

void updateModeBuffer(int mode) {
 8000a84:	b480      	push	{r7}
 8000a86:	b083      	sub	sp, #12
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
	seven_seg_buffer[THIRD_ELEM] = mode / 10;
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	4a0d      	ldr	r2, [pc, #52]	; (8000ac4 <updateModeBuffer+0x40>)
 8000a90:	fb82 1203 	smull	r1, r2, r2, r3
 8000a94:	1092      	asrs	r2, r2, #2
 8000a96:	17db      	asrs	r3, r3, #31
 8000a98:	1ad3      	subs	r3, r2, r3
 8000a9a:	4a0b      	ldr	r2, [pc, #44]	; (8000ac8 <updateModeBuffer+0x44>)
 8000a9c:	6093      	str	r3, [r2, #8]
	seven_seg_buffer[FOURTH_ELEM] = mode % 10;
 8000a9e:	6879      	ldr	r1, [r7, #4]
 8000aa0:	4b08      	ldr	r3, [pc, #32]	; (8000ac4 <updateModeBuffer+0x40>)
 8000aa2:	fb83 2301 	smull	r2, r3, r3, r1
 8000aa6:	109a      	asrs	r2, r3, #2
 8000aa8:	17cb      	asrs	r3, r1, #31
 8000aaa:	1ad2      	subs	r2, r2, r3
 8000aac:	4613      	mov	r3, r2
 8000aae:	009b      	lsls	r3, r3, #2
 8000ab0:	4413      	add	r3, r2
 8000ab2:	005b      	lsls	r3, r3, #1
 8000ab4:	1aca      	subs	r2, r1, r3
 8000ab6:	4b04      	ldr	r3, [pc, #16]	; (8000ac8 <updateModeBuffer+0x44>)
 8000ab8:	60da      	str	r2, [r3, #12]
}
 8000aba:	bf00      	nop
 8000abc:	370c      	adds	r7, #12
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bc80      	pop	{r7}
 8000ac2:	4770      	bx	lr
 8000ac4:	66666667 	.word	0x66666667
 8000ac8:	200000d8 	.word	0x200000d8

08000acc <display7SEG>:

void display7SEG(int index) {
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
	if(index < 0 || index >= MAX_7SEG_LEDS) return;
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	db0d      	blt.n	8000af6 <display7SEG+0x2a>
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	2b03      	cmp	r3, #3
 8000ade:	dc0a      	bgt.n	8000af6 <display7SEG+0x2a>
	enable7SEG(index);
 8000ae0:	6878      	ldr	r0, [r7, #4]
 8000ae2:	f7ff ff33 	bl	800094c <enable7SEG>
	driver7SEG(seven_seg_buffer[index]);
 8000ae6:	4a06      	ldr	r2, [pc, #24]	; (8000b00 <display7SEG+0x34>)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000aee:	4618      	mov	r0, r3
 8000af0:	f7ff fef6 	bl	80008e0 <driver7SEG>
 8000af4:	e000      	b.n	8000af8 <display7SEG+0x2c>
	if(index < 0 || index >= MAX_7SEG_LEDS) return;
 8000af6:	bf00      	nop
}
 8000af8:	3708      	adds	r7, #8
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	200000d8 	.word	0x200000d8

08000b04 <scan7SEG>:

void scan7SEG(void) {
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
	if(timer1_flag == 1) {
 8000b08:	4b0d      	ldr	r3, [pc, #52]	; (8000b40 <scan7SEG+0x3c>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	2b01      	cmp	r3, #1
 8000b0e:	d115      	bne.n	8000b3c <scan7SEG+0x38>
		setTimer1(LED_SCAN_PERIOD);
 8000b10:	2064      	movs	r0, #100	; 0x64
 8000b12:	f000 f841 	bl	8000b98 <setTimer1>
		display7SEG(seven_seg_index++);
 8000b16:	4b0b      	ldr	r3, [pc, #44]	; (8000b44 <scan7SEG+0x40>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	1c5a      	adds	r2, r3, #1
 8000b1c:	4909      	ldr	r1, [pc, #36]	; (8000b44 <scan7SEG+0x40>)
 8000b1e:	600a      	str	r2, [r1, #0]
 8000b20:	4618      	mov	r0, r3
 8000b22:	f7ff ffd3 	bl	8000acc <display7SEG>
		seven_seg_index %= MAX_7SEG_LEDS;
 8000b26:	4b07      	ldr	r3, [pc, #28]	; (8000b44 <scan7SEG+0x40>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	425a      	negs	r2, r3
 8000b2c:	f003 0303 	and.w	r3, r3, #3
 8000b30:	f002 0203 	and.w	r2, r2, #3
 8000b34:	bf58      	it	pl
 8000b36:	4253      	negpl	r3, r2
 8000b38:	4a02      	ldr	r2, [pc, #8]	; (8000b44 <scan7SEG+0x40>)
 8000b3a:	6013      	str	r3, [r2, #0]
	}
}
 8000b3c:	bf00      	nop
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	200000f8 	.word	0x200000f8
 8000b44:	200000e8 	.word	0x200000e8

08000b48 <reset7SEGIndex>:

void reset7SEGIndex(void){
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
	seven_seg_index = 0;
 8000b4c:	4b03      	ldr	r3, [pc, #12]	; (8000b5c <reset7SEGIndex+0x14>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	601a      	str	r2, [r3, #0]
}
 8000b52:	bf00      	nop
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bc80      	pop	{r7}
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop
 8000b5c:	200000e8 	.word	0x200000e8

08000b60 <setTrafficTimer>:
int timer2_flag = 0;

int timer3_counter = 0;
int timer3_flag = 0;

void setTrafficTimer(int duration) {
 8000b60:	b480      	push	{r7}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
	if(SYSTEM_DELAY > 0) {
		traffic_timer_counter= duration / SYSTEM_DELAY;
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	4a08      	ldr	r2, [pc, #32]	; (8000b8c <setTrafficTimer+0x2c>)
 8000b6c:	fb82 1203 	smull	r1, r2, r2, r3
 8000b70:	1092      	asrs	r2, r2, #2
 8000b72:	17db      	asrs	r3, r3, #31
 8000b74:	1ad3      	subs	r3, r2, r3
 8000b76:	4a06      	ldr	r2, [pc, #24]	; (8000b90 <setTrafficTimer+0x30>)
 8000b78:	6013      	str	r3, [r2, #0]
	} else traffic_timer_counter = duration;
	traffic_timer_flag = 0;
 8000b7a:	4b06      	ldr	r3, [pc, #24]	; (8000b94 <setTrafficTimer+0x34>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	601a      	str	r2, [r3, #0]
}
 8000b80:	bf00      	nop
 8000b82:	370c      	adds	r7, #12
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bc80      	pop	{r7}
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop
 8000b8c:	66666667 	.word	0x66666667
 8000b90:	200000f0 	.word	0x200000f0
 8000b94:	200000ec 	.word	0x200000ec

08000b98 <setTimer1>:

void setTimer1(int duration) {
 8000b98:	b480      	push	{r7}
 8000b9a:	b083      	sub	sp, #12
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
	if(SYSTEM_DELAY > 0) {
		timer1_counter = duration / SYSTEM_DELAY;
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	4a08      	ldr	r2, [pc, #32]	; (8000bc4 <setTimer1+0x2c>)
 8000ba4:	fb82 1203 	smull	r1, r2, r2, r3
 8000ba8:	1092      	asrs	r2, r2, #2
 8000baa:	17db      	asrs	r3, r3, #31
 8000bac:	1ad3      	subs	r3, r2, r3
 8000bae:	4a06      	ldr	r2, [pc, #24]	; (8000bc8 <setTimer1+0x30>)
 8000bb0:	6013      	str	r3, [r2, #0]
	} else timer1_counter = duration;
	timer1_flag = 0;
 8000bb2:	4b06      	ldr	r3, [pc, #24]	; (8000bcc <setTimer1+0x34>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	601a      	str	r2, [r3, #0]
}
 8000bb8:	bf00      	nop
 8000bba:	370c      	adds	r7, #12
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bc80      	pop	{r7}
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop
 8000bc4:	66666667 	.word	0x66666667
 8000bc8:	200000f4 	.word	0x200000f4
 8000bcc:	200000f8 	.word	0x200000f8

08000bd0 <setTimer2>:

void setTimer2(int duration) {
 8000bd0:	b480      	push	{r7}
 8000bd2:	b083      	sub	sp, #12
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
	if(SYSTEM_DELAY > 0) {
		timer2_counter = duration / SYSTEM_DELAY;
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	4a08      	ldr	r2, [pc, #32]	; (8000bfc <setTimer2+0x2c>)
 8000bdc:	fb82 1203 	smull	r1, r2, r2, r3
 8000be0:	1092      	asrs	r2, r2, #2
 8000be2:	17db      	asrs	r3, r3, #31
 8000be4:	1ad3      	subs	r3, r2, r3
 8000be6:	4a06      	ldr	r2, [pc, #24]	; (8000c00 <setTimer2+0x30>)
 8000be8:	6013      	str	r3, [r2, #0]
	} else timer2_counter = duration;
	timer2_flag = 0;
 8000bea:	4b06      	ldr	r3, [pc, #24]	; (8000c04 <setTimer2+0x34>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	601a      	str	r2, [r3, #0]
}
 8000bf0:	bf00      	nop
 8000bf2:	370c      	adds	r7, #12
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bc80      	pop	{r7}
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	66666667 	.word	0x66666667
 8000c00:	200000fc 	.word	0x200000fc
 8000c04:	20000100 	.word	0x20000100

08000c08 <timerRun>:
		timer3_counter = duration / SYSTEM_DELAY;
	} else timer3_counter = duration;
	timer3_flag = 0;
}

void timerRun(void) {
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
	if(traffic_timer_counter > 0) {
 8000c0c:	4b21      	ldr	r3, [pc, #132]	; (8000c94 <timerRun+0x8c>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	dd0b      	ble.n	8000c2c <timerRun+0x24>
		traffic_timer_counter--;
 8000c14:	4b1f      	ldr	r3, [pc, #124]	; (8000c94 <timerRun+0x8c>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	3b01      	subs	r3, #1
 8000c1a:	4a1e      	ldr	r2, [pc, #120]	; (8000c94 <timerRun+0x8c>)
 8000c1c:	6013      	str	r3, [r2, #0]
		if(traffic_timer_counter <= 0) {
 8000c1e:	4b1d      	ldr	r3, [pc, #116]	; (8000c94 <timerRun+0x8c>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	dc02      	bgt.n	8000c2c <timerRun+0x24>
			traffic_timer_flag = 1;
 8000c26:	4b1c      	ldr	r3, [pc, #112]	; (8000c98 <timerRun+0x90>)
 8000c28:	2201      	movs	r2, #1
 8000c2a:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer1_counter > 0) {
 8000c2c:	4b1b      	ldr	r3, [pc, #108]	; (8000c9c <timerRun+0x94>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	dd0b      	ble.n	8000c4c <timerRun+0x44>
		timer1_counter--;
 8000c34:	4b19      	ldr	r3, [pc, #100]	; (8000c9c <timerRun+0x94>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	3b01      	subs	r3, #1
 8000c3a:	4a18      	ldr	r2, [pc, #96]	; (8000c9c <timerRun+0x94>)
 8000c3c:	6013      	str	r3, [r2, #0]
		if(timer1_counter <= 0) {
 8000c3e:	4b17      	ldr	r3, [pc, #92]	; (8000c9c <timerRun+0x94>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	dc02      	bgt.n	8000c4c <timerRun+0x44>
			timer1_flag = 1;
 8000c46:	4b16      	ldr	r3, [pc, #88]	; (8000ca0 <timerRun+0x98>)
 8000c48:	2201      	movs	r2, #1
 8000c4a:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer2_counter > 0) {
 8000c4c:	4b15      	ldr	r3, [pc, #84]	; (8000ca4 <timerRun+0x9c>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	dd0b      	ble.n	8000c6c <timerRun+0x64>
		timer2_counter--;
 8000c54:	4b13      	ldr	r3, [pc, #76]	; (8000ca4 <timerRun+0x9c>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	3b01      	subs	r3, #1
 8000c5a:	4a12      	ldr	r2, [pc, #72]	; (8000ca4 <timerRun+0x9c>)
 8000c5c:	6013      	str	r3, [r2, #0]
		if(timer2_counter <= 0) {
 8000c5e:	4b11      	ldr	r3, [pc, #68]	; (8000ca4 <timerRun+0x9c>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	dc02      	bgt.n	8000c6c <timerRun+0x64>
			timer2_flag = 1;
 8000c66:	4b10      	ldr	r3, [pc, #64]	; (8000ca8 <timerRun+0xa0>)
 8000c68:	2201      	movs	r2, #1
 8000c6a:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer3_counter > 0) {
 8000c6c:	4b0f      	ldr	r3, [pc, #60]	; (8000cac <timerRun+0xa4>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	dd0b      	ble.n	8000c8c <timerRun+0x84>
		timer3_counter--;
 8000c74:	4b0d      	ldr	r3, [pc, #52]	; (8000cac <timerRun+0xa4>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	3b01      	subs	r3, #1
 8000c7a:	4a0c      	ldr	r2, [pc, #48]	; (8000cac <timerRun+0xa4>)
 8000c7c:	6013      	str	r3, [r2, #0]
		if(timer3_counter <= 0) {
 8000c7e:	4b0b      	ldr	r3, [pc, #44]	; (8000cac <timerRun+0xa4>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	dc02      	bgt.n	8000c8c <timerRun+0x84>
			timer3_flag = 1;
 8000c86:	4b0a      	ldr	r3, [pc, #40]	; (8000cb0 <timerRun+0xa8>)
 8000c88:	2201      	movs	r2, #1
 8000c8a:	601a      	str	r2, [r3, #0]
		}
	}
}
 8000c8c:	bf00      	nop
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bc80      	pop	{r7}
 8000c92:	4770      	bx	lr
 8000c94:	200000f0 	.word	0x200000f0
 8000c98:	200000ec 	.word	0x200000ec
 8000c9c:	200000f4 	.word	0x200000f4
 8000ca0:	200000f8 	.word	0x200000f8
 8000ca4:	200000fc 	.word	0x200000fc
 8000ca8:	20000100 	.word	0x20000100
 8000cac:	20000104 	.word	0x20000104
 8000cb0:	20000108 	.word	0x20000108

08000cb4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b085      	sub	sp, #20
 8000cb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000cba:	4b15      	ldr	r3, [pc, #84]	; (8000d10 <HAL_MspInit+0x5c>)
 8000cbc:	699b      	ldr	r3, [r3, #24]
 8000cbe:	4a14      	ldr	r2, [pc, #80]	; (8000d10 <HAL_MspInit+0x5c>)
 8000cc0:	f043 0301 	orr.w	r3, r3, #1
 8000cc4:	6193      	str	r3, [r2, #24]
 8000cc6:	4b12      	ldr	r3, [pc, #72]	; (8000d10 <HAL_MspInit+0x5c>)
 8000cc8:	699b      	ldr	r3, [r3, #24]
 8000cca:	f003 0301 	and.w	r3, r3, #1
 8000cce:	60bb      	str	r3, [r7, #8]
 8000cd0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cd2:	4b0f      	ldr	r3, [pc, #60]	; (8000d10 <HAL_MspInit+0x5c>)
 8000cd4:	69db      	ldr	r3, [r3, #28]
 8000cd6:	4a0e      	ldr	r2, [pc, #56]	; (8000d10 <HAL_MspInit+0x5c>)
 8000cd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cdc:	61d3      	str	r3, [r2, #28]
 8000cde:	4b0c      	ldr	r3, [pc, #48]	; (8000d10 <HAL_MspInit+0x5c>)
 8000ce0:	69db      	ldr	r3, [r3, #28]
 8000ce2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ce6:	607b      	str	r3, [r7, #4]
 8000ce8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000cea:	4b0a      	ldr	r3, [pc, #40]	; (8000d14 <HAL_MspInit+0x60>)
 8000cec:	685b      	ldr	r3, [r3, #4]
 8000cee:	60fb      	str	r3, [r7, #12]
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000cf6:	60fb      	str	r3, [r7, #12]
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000cfe:	60fb      	str	r3, [r7, #12]
 8000d00:	4a04      	ldr	r2, [pc, #16]	; (8000d14 <HAL_MspInit+0x60>)
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d06:	bf00      	nop
 8000d08:	3714      	adds	r7, #20
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bc80      	pop	{r7}
 8000d0e:	4770      	bx	lr
 8000d10:	40021000 	.word	0x40021000
 8000d14:	40010000 	.word	0x40010000

08000d18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d1c:	e7fe      	b.n	8000d1c <NMI_Handler+0x4>

08000d1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d1e:	b480      	push	{r7}
 8000d20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d22:	e7fe      	b.n	8000d22 <HardFault_Handler+0x4>

08000d24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d28:	e7fe      	b.n	8000d28 <MemManage_Handler+0x4>

08000d2a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d2a:	b480      	push	{r7}
 8000d2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d2e:	e7fe      	b.n	8000d2e <BusFault_Handler+0x4>

08000d30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d34:	e7fe      	b.n	8000d34 <UsageFault_Handler+0x4>

08000d36 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d36:	b480      	push	{r7}
 8000d38:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d3a:	bf00      	nop
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bc80      	pop	{r7}
 8000d40:	4770      	bx	lr

08000d42 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d42:	b480      	push	{r7}
 8000d44:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d46:	bf00      	nop
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bc80      	pop	{r7}
 8000d4c:	4770      	bx	lr

08000d4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d4e:	b480      	push	{r7}
 8000d50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d52:	bf00      	nop
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bc80      	pop	{r7}
 8000d58:	4770      	bx	lr

08000d5a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d5a:	b580      	push	{r7, lr}
 8000d5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d5e:	f000 fb13 	bl	8001388 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d62:	bf00      	nop
 8000d64:	bd80      	pop	{r7, pc}
	...

08000d68 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000d6c:	4802      	ldr	r0, [pc, #8]	; (8000d78 <TIM2_IRQHandler+0x10>)
 8000d6e:	f001 fa7d 	bl	800226c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000d72:	bf00      	nop
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	2000010c 	.word	0x2000010c

08000d7c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d80:	bf00      	nop
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bc80      	pop	{r7}
 8000d86:	4770      	bx	lr

08000d88 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b086      	sub	sp, #24
 8000d8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d8e:	f107 0308 	add.w	r3, r7, #8
 8000d92:	2200      	movs	r2, #0
 8000d94:	601a      	str	r2, [r3, #0]
 8000d96:	605a      	str	r2, [r3, #4]
 8000d98:	609a      	str	r2, [r3, #8]
 8000d9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d9c:	463b      	mov	r3, r7
 8000d9e:	2200      	movs	r2, #0
 8000da0:	601a      	str	r2, [r3, #0]
 8000da2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000da4:	4b1d      	ldr	r3, [pc, #116]	; (8000e1c <MX_TIM2_Init+0x94>)
 8000da6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000daa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000dac:	4b1b      	ldr	r3, [pc, #108]	; (8000e1c <MX_TIM2_Init+0x94>)
 8000dae:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000db2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000db4:	4b19      	ldr	r3, [pc, #100]	; (8000e1c <MX_TIM2_Init+0x94>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000dba:	4b18      	ldr	r3, [pc, #96]	; (8000e1c <MX_TIM2_Init+0x94>)
 8000dbc:	2209      	movs	r2, #9
 8000dbe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dc0:	4b16      	ldr	r3, [pc, #88]	; (8000e1c <MX_TIM2_Init+0x94>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dc6:	4b15      	ldr	r3, [pc, #84]	; (8000e1c <MX_TIM2_Init+0x94>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000dcc:	4813      	ldr	r0, [pc, #76]	; (8000e1c <MX_TIM2_Init+0x94>)
 8000dce:	f001 f9b1 	bl	8002134 <HAL_TIM_Base_Init>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000dd8:	f7ff fd7c 	bl	80008d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ddc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000de0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000de2:	f107 0308 	add.w	r3, r7, #8
 8000de6:	4619      	mov	r1, r3
 8000de8:	480c      	ldr	r0, [pc, #48]	; (8000e1c <MX_TIM2_Init+0x94>)
 8000dea:	f001 fb47 	bl	800247c <HAL_TIM_ConfigClockSource>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d001      	beq.n	8000df8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000df4:	f7ff fd6e 	bl	80008d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e00:	463b      	mov	r3, r7
 8000e02:	4619      	mov	r1, r3
 8000e04:	4805      	ldr	r0, [pc, #20]	; (8000e1c <MX_TIM2_Init+0x94>)
 8000e06:	f001 fd0f 	bl	8002828 <HAL_TIMEx_MasterConfigSynchronization>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d001      	beq.n	8000e14 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000e10:	f7ff fd60 	bl	80008d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000e14:	bf00      	nop
 8000e16:	3718      	adds	r7, #24
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	2000010c 	.word	0x2000010c

08000e20 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b084      	sub	sp, #16
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e30:	d113      	bne.n	8000e5a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e32:	4b0c      	ldr	r3, [pc, #48]	; (8000e64 <HAL_TIM_Base_MspInit+0x44>)
 8000e34:	69db      	ldr	r3, [r3, #28]
 8000e36:	4a0b      	ldr	r2, [pc, #44]	; (8000e64 <HAL_TIM_Base_MspInit+0x44>)
 8000e38:	f043 0301 	orr.w	r3, r3, #1
 8000e3c:	61d3      	str	r3, [r2, #28]
 8000e3e:	4b09      	ldr	r3, [pc, #36]	; (8000e64 <HAL_TIM_Base_MspInit+0x44>)
 8000e40:	69db      	ldr	r3, [r3, #28]
 8000e42:	f003 0301 	and.w	r3, r3, #1
 8000e46:	60fb      	str	r3, [r7, #12]
 8000e48:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	201c      	movs	r0, #28
 8000e50:	f000 fb8d 	bl	800156e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000e54:	201c      	movs	r0, #28
 8000e56:	f000 fba6 	bl	80015a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000e5a:	bf00      	nop
 8000e5c:	3710      	adds	r7, #16
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	40021000 	.word	0x40021000

08000e68 <allOff>:

//count-down for south/north, east/west lights
int snCountdown = 0;
int ewCountdown = 0;

void allOff(int index) {
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(redPort[index], redPin[index], OFF);
 8000e70:	4a13      	ldr	r2, [pc, #76]	; (8000ec0 <allOff+0x58>)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000e78:	4a12      	ldr	r2, [pc, #72]	; (8000ec4 <allOff+0x5c>)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e80:	2201      	movs	r2, #1
 8000e82:	4619      	mov	r1, r3
 8000e84:	f000 fd3d 	bl	8001902 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(yelPort[index], yelPin[index], OFF);
 8000e88:	4a0f      	ldr	r2, [pc, #60]	; (8000ec8 <allOff+0x60>)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000e90:	4a0e      	ldr	r2, [pc, #56]	; (8000ecc <allOff+0x64>)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e98:	2201      	movs	r2, #1
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	f000 fd31 	bl	8001902 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(grnPort[index], grnPin[index], OFF);
 8000ea0:	4a0b      	ldr	r2, [pc, #44]	; (8000ed0 <allOff+0x68>)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000ea8:	4a0a      	ldr	r2, [pc, #40]	; (8000ed4 <allOff+0x6c>)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	f000 fd25 	bl	8001902 <HAL_GPIO_WritePin>
}
 8000eb8:	bf00      	nop
 8000eba:	3708      	adds	r7, #8
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	2000006c 	.word	0x2000006c
 8000ec4:	20000074 	.word	0x20000074
 8000ec8:	20000078 	.word	0x20000078
 8000ecc:	20000080 	.word	0x20000080
 8000ed0:	20000084 	.word	0x20000084
 8000ed4:	2000008c 	.word	0x2000008c

08000ed8 <redLight>:

void redLight(int index) {
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(redPort[index], redPin[index], ON);
 8000ee0:	4a13      	ldr	r2, [pc, #76]	; (8000f30 <redLight+0x58>)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000ee8:	4a12      	ldr	r2, [pc, #72]	; (8000f34 <redLight+0x5c>)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	f000 fd05 	bl	8001902 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(yelPort[index], yelPin[index], OFF);
 8000ef8:	4a0f      	ldr	r2, [pc, #60]	; (8000f38 <redLight+0x60>)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000f00:	4a0e      	ldr	r2, [pc, #56]	; (8000f3c <redLight+0x64>)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f08:	2201      	movs	r2, #1
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	f000 fcf9 	bl	8001902 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(grnPort[index], grnPin[index], OFF);
 8000f10:	4a0b      	ldr	r2, [pc, #44]	; (8000f40 <redLight+0x68>)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000f18:	4a0a      	ldr	r2, [pc, #40]	; (8000f44 <redLight+0x6c>)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f20:	2201      	movs	r2, #1
 8000f22:	4619      	mov	r1, r3
 8000f24:	f000 fced 	bl	8001902 <HAL_GPIO_WritePin>

}
 8000f28:	bf00      	nop
 8000f2a:	3708      	adds	r7, #8
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	2000006c 	.word	0x2000006c
 8000f34:	20000074 	.word	0x20000074
 8000f38:	20000078 	.word	0x20000078
 8000f3c:	20000080 	.word	0x20000080
 8000f40:	20000084 	.word	0x20000084
 8000f44:	2000008c 	.word	0x2000008c

08000f48 <yelLight>:
void yelLight(int index) {
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(redPort[index], redPin[index], OFF);
 8000f50:	4a13      	ldr	r2, [pc, #76]	; (8000fa0 <yelLight+0x58>)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000f58:	4a12      	ldr	r2, [pc, #72]	; (8000fa4 <yelLight+0x5c>)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f60:	2201      	movs	r2, #1
 8000f62:	4619      	mov	r1, r3
 8000f64:	f000 fccd 	bl	8001902 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(yelPort[index], yelPin[index], ON);
 8000f68:	4a0f      	ldr	r2, [pc, #60]	; (8000fa8 <yelLight+0x60>)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000f70:	4a0e      	ldr	r2, [pc, #56]	; (8000fac <yelLight+0x64>)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f78:	2200      	movs	r2, #0
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	f000 fcc1 	bl	8001902 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(grnPort[index], grnPin[index], OFF);
 8000f80:	4a0b      	ldr	r2, [pc, #44]	; (8000fb0 <yelLight+0x68>)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000f88:	4a0a      	ldr	r2, [pc, #40]	; (8000fb4 <yelLight+0x6c>)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f90:	2201      	movs	r2, #1
 8000f92:	4619      	mov	r1, r3
 8000f94:	f000 fcb5 	bl	8001902 <HAL_GPIO_WritePin>
}
 8000f98:	bf00      	nop
 8000f9a:	3708      	adds	r7, #8
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	2000006c 	.word	0x2000006c
 8000fa4:	20000074 	.word	0x20000074
 8000fa8:	20000078 	.word	0x20000078
 8000fac:	20000080 	.word	0x20000080
 8000fb0:	20000084 	.word	0x20000084
 8000fb4:	2000008c 	.word	0x2000008c

08000fb8 <grnLight>:
void grnLight(int index) {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(redPort[index], redPin[index], OFF);
 8000fc0:	4a13      	ldr	r2, [pc, #76]	; (8001010 <grnLight+0x58>)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000fc8:	4a12      	ldr	r2, [pc, #72]	; (8001014 <grnLight+0x5c>)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	f000 fc95 	bl	8001902 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(yelPort[index], yelPin[index], OFF);
 8000fd8:	4a0f      	ldr	r2, [pc, #60]	; (8001018 <grnLight+0x60>)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000fe0:	4a0e      	ldr	r2, [pc, #56]	; (800101c <grnLight+0x64>)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000fe8:	2201      	movs	r2, #1
 8000fea:	4619      	mov	r1, r3
 8000fec:	f000 fc89 	bl	8001902 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(grnPort[index], grnPin[index], ON);
 8000ff0:	4a0b      	ldr	r2, [pc, #44]	; (8001020 <grnLight+0x68>)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000ff8:	4a0a      	ldr	r2, [pc, #40]	; (8001024 <grnLight+0x6c>)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001000:	2200      	movs	r2, #0
 8001002:	4619      	mov	r1, r3
 8001004:	f000 fc7d 	bl	8001902 <HAL_GPIO_WritePin>
}
 8001008:	bf00      	nop
 800100a:	3708      	adds	r7, #8
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	2000006c 	.word	0x2000006c
 8001014:	20000074 	.word	0x20000074
 8001018:	20000078 	.word	0x20000078
 800101c:	20000080 	.word	0x20000080
 8001020:	20000084 	.word	0x20000084
 8001024:	2000008c 	.word	0x2000008c

08001028 <yelBlink>:

void yelBlink(void) {
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
	for(int i = 0; i < NO_OF_EACH; i++) {
 800102e:	2300      	movs	r3, #0
 8001030:	607b      	str	r3, [r7, #4]
 8001032:	e026      	b.n	8001082 <yelBlink+0x5a>
		HAL_GPIO_WritePin(redPort[i], redPin[i], OFF);
 8001034:	4a17      	ldr	r2, [pc, #92]	; (8001094 <yelBlink+0x6c>)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800103c:	4a16      	ldr	r2, [pc, #88]	; (8001098 <yelBlink+0x70>)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001044:	2201      	movs	r2, #1
 8001046:	4619      	mov	r1, r3
 8001048:	f000 fc5b 	bl	8001902 <HAL_GPIO_WritePin>
		HAL_GPIO_TogglePin(yelPort[i], yelPin[i]);
 800104c:	4a13      	ldr	r2, [pc, #76]	; (800109c <yelBlink+0x74>)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001054:	4912      	ldr	r1, [pc, #72]	; (80010a0 <yelBlink+0x78>)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800105c:	4619      	mov	r1, r3
 800105e:	4610      	mov	r0, r2
 8001060:	f000 fc67 	bl	8001932 <HAL_GPIO_TogglePin>
		HAL_GPIO_WritePin(grnPort[i], grnPin[i], OFF);
 8001064:	4a0f      	ldr	r2, [pc, #60]	; (80010a4 <yelBlink+0x7c>)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800106c:	4a0e      	ldr	r2, [pc, #56]	; (80010a8 <yelBlink+0x80>)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001074:	2201      	movs	r2, #1
 8001076:	4619      	mov	r1, r3
 8001078:	f000 fc43 	bl	8001902 <HAL_GPIO_WritePin>
	for(int i = 0; i < NO_OF_EACH; i++) {
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	3301      	adds	r3, #1
 8001080:	607b      	str	r3, [r7, #4]
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	2b01      	cmp	r3, #1
 8001086:	ddd5      	ble.n	8001034 <yelBlink+0xc>
	}
}
 8001088:	bf00      	nop
 800108a:	bf00      	nop
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	2000006c 	.word	0x2000006c
 8001098:	20000074 	.word	0x20000074
 800109c:	20000078 	.word	0x20000078
 80010a0:	20000080 	.word	0x20000080
 80010a4:	20000084 	.word	0x20000084
 80010a8:	2000008c 	.word	0x2000008c

080010ac <grnBlink>:

void grnBlink(void) {
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
	for(int i = 0; i < NO_OF_EACH; i++) {
 80010b2:	2300      	movs	r3, #0
 80010b4:	607b      	str	r3, [r7, #4]
 80010b6:	e026      	b.n	8001106 <grnBlink+0x5a>
		HAL_GPIO_WritePin(redPort[i], redPin[i], OFF);
 80010b8:	4a17      	ldr	r2, [pc, #92]	; (8001118 <grnBlink+0x6c>)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80010c0:	4a16      	ldr	r2, [pc, #88]	; (800111c <grnBlink+0x70>)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80010c8:	2201      	movs	r2, #1
 80010ca:	4619      	mov	r1, r3
 80010cc:	f000 fc19 	bl	8001902 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yelPort[i], yelPin[i], OFF);
 80010d0:	4a13      	ldr	r2, [pc, #76]	; (8001120 <grnBlink+0x74>)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80010d8:	4a12      	ldr	r2, [pc, #72]	; (8001124 <grnBlink+0x78>)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80010e0:	2201      	movs	r2, #1
 80010e2:	4619      	mov	r1, r3
 80010e4:	f000 fc0d 	bl	8001902 <HAL_GPIO_WritePin>
		HAL_GPIO_TogglePin(grnPort[i], grnPin[i]);
 80010e8:	4a0f      	ldr	r2, [pc, #60]	; (8001128 <grnBlink+0x7c>)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80010f0:	490e      	ldr	r1, [pc, #56]	; (800112c <grnBlink+0x80>)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80010f8:	4619      	mov	r1, r3
 80010fa:	4610      	mov	r0, r2
 80010fc:	f000 fc19 	bl	8001932 <HAL_GPIO_TogglePin>
	for(int i = 0; i < NO_OF_EACH; i++) {
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	3301      	adds	r3, #1
 8001104:	607b      	str	r3, [r7, #4]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2b01      	cmp	r3, #1
 800110a:	ddd5      	ble.n	80010b8 <grnBlink+0xc>
	}
}
 800110c:	bf00      	nop
 800110e:	bf00      	nop
 8001110:	3708      	adds	r7, #8
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	2000006c 	.word	0x2000006c
 800111c:	20000074 	.word	0x20000074
 8001120:	20000078 	.word	0x20000078
 8001124:	20000080 	.word	0x20000080
 8001128:	20000084 	.word	0x20000084
 800112c:	2000008c 	.word	0x2000008c

08001130 <getRedTime>:

int getRedTime(void) {
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
	return redTime * SECOND;
 8001134:	4b04      	ldr	r3, [pc, #16]	; (8001148 <getRedTime+0x18>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800113c:	fb02 f303 	mul.w	r3, r2, r3
}
 8001140:	4618      	mov	r0, r3
 8001142:	46bd      	mov	sp, r7
 8001144:	bc80      	pop	{r7}
 8001146:	4770      	bx	lr
 8001148:	20000090 	.word	0x20000090

0800114c <getYelTime>:

int getYelTime(void) {
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
	return yelTime * SECOND;
 8001150:	4b04      	ldr	r3, [pc, #16]	; (8001164 <getYelTime+0x18>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001158:	fb02 f303 	mul.w	r3, r2, r3
}
 800115c:	4618      	mov	r0, r3
 800115e:	46bd      	mov	sp, r7
 8001160:	bc80      	pop	{r7}
 8001162:	4770      	bx	lr
 8001164:	20000094 	.word	0x20000094

08001168 <getGrnTime>:

int getGrnTime(void) {
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
	return grnTime * SECOND;
 800116c:	4b04      	ldr	r3, [pc, #16]	; (8001180 <getGrnTime+0x18>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001174:	fb02 f303 	mul.w	r3, r2, r3
}
 8001178:	4618      	mov	r0, r3
 800117a:	46bd      	mov	sp, r7
 800117c:	bc80      	pop	{r7}
 800117e:	4770      	bx	lr
 8001180:	20000098 	.word	0x20000098

08001184 <setCountdown>:

void setCountdown(int direction, int duration) {
 8001184:	b480      	push	{r7}
 8001186:	b083      	sub	sp, #12
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
 800118c:	6039      	str	r1, [r7, #0]
	if(duration <= 0) return;
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	2b00      	cmp	r3, #0
 8001192:	dd19      	ble.n	80011c8 <setCountdown+0x44>
	if(direction == SOUTH_NORTH) {
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d109      	bne.n	80011ae <setCountdown+0x2a>
		snCountdown = duration / SECOND;
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	4a0d      	ldr	r2, [pc, #52]	; (80011d4 <setCountdown+0x50>)
 800119e:	fb82 1203 	smull	r1, r2, r2, r3
 80011a2:	1192      	asrs	r2, r2, #6
 80011a4:	17db      	asrs	r3, r3, #31
 80011a6:	1ad3      	subs	r3, r2, r3
 80011a8:	4a0b      	ldr	r2, [pc, #44]	; (80011d8 <setCountdown+0x54>)
 80011aa:	6013      	str	r3, [r2, #0]
 80011ac:	e00d      	b.n	80011ca <setCountdown+0x46>
	}
	else if(direction == EAST_WEST) {
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2b01      	cmp	r3, #1
 80011b2:	d10a      	bne.n	80011ca <setCountdown+0x46>
		ewCountdown = duration / SECOND;
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	4a07      	ldr	r2, [pc, #28]	; (80011d4 <setCountdown+0x50>)
 80011b8:	fb82 1203 	smull	r1, r2, r2, r3
 80011bc:	1192      	asrs	r2, r2, #6
 80011be:	17db      	asrs	r3, r3, #31
 80011c0:	1ad3      	subs	r3, r2, r3
 80011c2:	4a06      	ldr	r2, [pc, #24]	; (80011dc <setCountdown+0x58>)
 80011c4:	6013      	str	r3, [r2, #0]
 80011c6:	e000      	b.n	80011ca <setCountdown+0x46>
	if(duration <= 0) return;
 80011c8:	bf00      	nop
	}
}
 80011ca:	370c      	adds	r7, #12
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bc80      	pop	{r7}
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	10624dd3 	.word	0x10624dd3
 80011d8:	20000154 	.word	0x20000154
 80011dc:	20000158 	.word	0x20000158

080011e0 <updateCountdown>:

void updateCountdown() {
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
	if(snCountdown > 0) snCountdown--;
 80011e4:	4b0a      	ldr	r3, [pc, #40]	; (8001210 <updateCountdown+0x30>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	dd04      	ble.n	80011f6 <updateCountdown+0x16>
 80011ec:	4b08      	ldr	r3, [pc, #32]	; (8001210 <updateCountdown+0x30>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	3b01      	subs	r3, #1
 80011f2:	4a07      	ldr	r2, [pc, #28]	; (8001210 <updateCountdown+0x30>)
 80011f4:	6013      	str	r3, [r2, #0]
	if(ewCountdown >0) ewCountdown--;
 80011f6:	4b07      	ldr	r3, [pc, #28]	; (8001214 <updateCountdown+0x34>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	dd04      	ble.n	8001208 <updateCountdown+0x28>
 80011fe:	4b05      	ldr	r3, [pc, #20]	; (8001214 <updateCountdown+0x34>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	3b01      	subs	r3, #1
 8001204:	4a03      	ldr	r2, [pc, #12]	; (8001214 <updateCountdown+0x34>)
 8001206:	6013      	str	r3, [r2, #0]
}
 8001208:	bf00      	nop
 800120a:	46bd      	mov	sp, r7
 800120c:	bc80      	pop	{r7}
 800120e:	4770      	bx	lr
 8001210:	20000154 	.word	0x20000154
 8001214:	20000158 	.word	0x20000158

08001218 <getCountdown>:

int getCountdown(int direction) {
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
	if(direction == SOUTH_NORTH) {
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d102      	bne.n	800122c <getCountdown+0x14>
		return snCountdown;
 8001226:	4b08      	ldr	r3, [pc, #32]	; (8001248 <getCountdown+0x30>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	e007      	b.n	800123c <getCountdown+0x24>
	}
	else if(direction == EAST_WEST) {
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2b01      	cmp	r3, #1
 8001230:	d102      	bne.n	8001238 <getCountdown+0x20>
		return ewCountdown;
 8001232:	4b06      	ldr	r3, [pc, #24]	; (800124c <getCountdown+0x34>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	e001      	b.n	800123c <getCountdown+0x24>
	}
	return -1;
 8001238:	f04f 33ff 	mov.w	r3, #4294967295
}
 800123c:	4618      	mov	r0, r3
 800123e:	370c      	adds	r7, #12
 8001240:	46bd      	mov	sp, r7
 8001242:	bc80      	pop	{r7}
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	20000154 	.word	0x20000154
 800124c:	20000158 	.word	0x20000158

08001250 <updateRedTime>:

void updateRedTime(void) {
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
	redTime = yelTime + grnTime;
 8001254:	4b05      	ldr	r3, [pc, #20]	; (800126c <updateRedTime+0x1c>)
 8001256:	681a      	ldr	r2, [r3, #0]
 8001258:	4b05      	ldr	r3, [pc, #20]	; (8001270 <updateRedTime+0x20>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4413      	add	r3, r2
 800125e:	4a05      	ldr	r2, [pc, #20]	; (8001274 <updateRedTime+0x24>)
 8001260:	6013      	str	r3, [r2, #0]
}
 8001262:	bf00      	nop
 8001264:	46bd      	mov	sp, r7
 8001266:	bc80      	pop	{r7}
 8001268:	4770      	bx	lr
 800126a:	bf00      	nop
 800126c:	20000094 	.word	0x20000094
 8001270:	20000098 	.word	0x20000098
 8001274:	20000090 	.word	0x20000090

08001278 <updateYelTime>:

void updateYelTime(int time) {
 8001278:	b480      	push	{r7}
 800127a:	b083      	sub	sp, #12
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
	yelTime = time;
 8001280:	4a03      	ldr	r2, [pc, #12]	; (8001290 <updateYelTime+0x18>)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6013      	str	r3, [r2, #0]
}
 8001286:	bf00      	nop
 8001288:	370c      	adds	r7, #12
 800128a:	46bd      	mov	sp, r7
 800128c:	bc80      	pop	{r7}
 800128e:	4770      	bx	lr
 8001290:	20000094 	.word	0x20000094

08001294 <updateGrnTime>:

void updateGrnTime(int time) {
 8001294:	b480      	push	{r7}
 8001296:	b083      	sub	sp, #12
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
	grnTime = time;
 800129c:	4a03      	ldr	r2, [pc, #12]	; (80012ac <updateGrnTime+0x18>)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6013      	str	r3, [r2, #0]
}
 80012a2:	bf00      	nop
 80012a4:	370c      	adds	r7, #12
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bc80      	pop	{r7}
 80012aa:	4770      	bx	lr
 80012ac:	20000098 	.word	0x20000098

080012b0 <Reset_Handler>:
 80012b0:	480c      	ldr	r0, [pc, #48]	; (80012e4 <LoopFillZerobss+0x12>)
 80012b2:	490d      	ldr	r1, [pc, #52]	; (80012e8 <LoopFillZerobss+0x16>)
 80012b4:	4a0d      	ldr	r2, [pc, #52]	; (80012ec <LoopFillZerobss+0x1a>)
 80012b6:	2300      	movs	r3, #0
 80012b8:	e002      	b.n	80012c0 <LoopCopyDataInit>

080012ba <CopyDataInit>:
 80012ba:	58d4      	ldr	r4, [r2, r3]
 80012bc:	50c4      	str	r4, [r0, r3]
 80012be:	3304      	adds	r3, #4

080012c0 <LoopCopyDataInit>:
 80012c0:	18c4      	adds	r4, r0, r3
 80012c2:	428c      	cmp	r4, r1
 80012c4:	d3f9      	bcc.n	80012ba <CopyDataInit>
 80012c6:	4a0a      	ldr	r2, [pc, #40]	; (80012f0 <LoopFillZerobss+0x1e>)
 80012c8:	4c0a      	ldr	r4, [pc, #40]	; (80012f4 <LoopFillZerobss+0x22>)
 80012ca:	2300      	movs	r3, #0
 80012cc:	e001      	b.n	80012d2 <LoopFillZerobss>

080012ce <FillZerobss>:
 80012ce:	6013      	str	r3, [r2, #0]
 80012d0:	3204      	adds	r2, #4

080012d2 <LoopFillZerobss>:
 80012d2:	42a2      	cmp	r2, r4
 80012d4:	d3fb      	bcc.n	80012ce <FillZerobss>
 80012d6:	f7ff fd51 	bl	8000d7c <SystemInit>
 80012da:	f001 fb0f 	bl	80028fc <__libc_init_array>
 80012de:	f7ff fa9b 	bl	8000818 <main>
 80012e2:	4770      	bx	lr
 80012e4:	20000000 	.word	0x20000000
 80012e8:	200000a4 	.word	0x200000a4
 80012ec:	080029a4 	.word	0x080029a4
 80012f0:	200000a4 	.word	0x200000a4
 80012f4:	20000160 	.word	0x20000160

080012f8 <ADC1_2_IRQHandler>:
 80012f8:	e7fe      	b.n	80012f8 <ADC1_2_IRQHandler>
	...

080012fc <HAL_Init>:
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
 8001300:	4b08      	ldr	r3, [pc, #32]	; (8001324 <HAL_Init+0x28>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a07      	ldr	r2, [pc, #28]	; (8001324 <HAL_Init+0x28>)
 8001306:	f043 0310 	orr.w	r3, r3, #16
 800130a:	6013      	str	r3, [r2, #0]
 800130c:	2003      	movs	r0, #3
 800130e:	f000 f923 	bl	8001558 <HAL_NVIC_SetPriorityGrouping>
 8001312:	200f      	movs	r0, #15
 8001314:	f000 f808 	bl	8001328 <HAL_InitTick>
 8001318:	f7ff fccc 	bl	8000cb4 <HAL_MspInit>
 800131c:	2300      	movs	r3, #0
 800131e:	4618      	mov	r0, r3
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	40022000 	.word	0x40022000

08001328 <HAL_InitTick>:
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
 8001330:	4b12      	ldr	r3, [pc, #72]	; (800137c <HAL_InitTick+0x54>)
 8001332:	681a      	ldr	r2, [r3, #0]
 8001334:	4b12      	ldr	r3, [pc, #72]	; (8001380 <HAL_InitTick+0x58>)
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	4619      	mov	r1, r3
 800133a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800133e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001342:	fbb2 f3f3 	udiv	r3, r2, r3
 8001346:	4618      	mov	r0, r3
 8001348:	f000 f93b 	bl	80015c2 <HAL_SYSTICK_Config>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <HAL_InitTick+0x2e>
 8001352:	2301      	movs	r3, #1
 8001354:	e00e      	b.n	8001374 <HAL_InitTick+0x4c>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2b0f      	cmp	r3, #15
 800135a:	d80a      	bhi.n	8001372 <HAL_InitTick+0x4a>
 800135c:	2200      	movs	r2, #0
 800135e:	6879      	ldr	r1, [r7, #4]
 8001360:	f04f 30ff 	mov.w	r0, #4294967295
 8001364:	f000 f903 	bl	800156e <HAL_NVIC_SetPriority>
 8001368:	4a06      	ldr	r2, [pc, #24]	; (8001384 <HAL_InitTick+0x5c>)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6013      	str	r3, [r2, #0]
 800136e:	2300      	movs	r3, #0
 8001370:	e000      	b.n	8001374 <HAL_InitTick+0x4c>
 8001372:	2301      	movs	r3, #1
 8001374:	4618      	mov	r0, r3
 8001376:	3708      	adds	r7, #8
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}
 800137c:	20000068 	.word	0x20000068
 8001380:	200000a0 	.word	0x200000a0
 8001384:	2000009c 	.word	0x2000009c

08001388 <HAL_IncTick>:
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
 800138c:	4b05      	ldr	r3, [pc, #20]	; (80013a4 <HAL_IncTick+0x1c>)
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	461a      	mov	r2, r3
 8001392:	4b05      	ldr	r3, [pc, #20]	; (80013a8 <HAL_IncTick+0x20>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4413      	add	r3, r2
 8001398:	4a03      	ldr	r2, [pc, #12]	; (80013a8 <HAL_IncTick+0x20>)
 800139a:	6013      	str	r3, [r2, #0]
 800139c:	bf00      	nop
 800139e:	46bd      	mov	sp, r7
 80013a0:	bc80      	pop	{r7}
 80013a2:	4770      	bx	lr
 80013a4:	200000a0 	.word	0x200000a0
 80013a8:	2000015c 	.word	0x2000015c

080013ac <HAL_GetTick>:
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	4b02      	ldr	r3, [pc, #8]	; (80013bc <HAL_GetTick+0x10>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4618      	mov	r0, r3
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bc80      	pop	{r7}
 80013ba:	4770      	bx	lr
 80013bc:	2000015c 	.word	0x2000015c

080013c0 <__NVIC_SetPriorityGrouping>:
 80013c0:	b480      	push	{r7}
 80013c2:	b085      	sub	sp, #20
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	f003 0307 	and.w	r3, r3, #7
 80013ce:	60fb      	str	r3, [r7, #12]
 80013d0:	4b0c      	ldr	r3, [pc, #48]	; (8001404 <__NVIC_SetPriorityGrouping+0x44>)
 80013d2:	68db      	ldr	r3, [r3, #12]
 80013d4:	60bb      	str	r3, [r7, #8]
 80013d6:	68ba      	ldr	r2, [r7, #8]
 80013d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013dc:	4013      	ands	r3, r2
 80013de:	60bb      	str	r3, [r7, #8]
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	021a      	lsls	r2, r3, #8
 80013e4:	68bb      	ldr	r3, [r7, #8]
 80013e6:	4313      	orrs	r3, r2
 80013e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013f0:	60bb      	str	r3, [r7, #8]
 80013f2:	4a04      	ldr	r2, [pc, #16]	; (8001404 <__NVIC_SetPriorityGrouping+0x44>)
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	60d3      	str	r3, [r2, #12]
 80013f8:	bf00      	nop
 80013fa:	3714      	adds	r7, #20
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bc80      	pop	{r7}
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	e000ed00 	.word	0xe000ed00

08001408 <__NVIC_GetPriorityGrouping>:
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
 800140c:	4b04      	ldr	r3, [pc, #16]	; (8001420 <__NVIC_GetPriorityGrouping+0x18>)
 800140e:	68db      	ldr	r3, [r3, #12]
 8001410:	0a1b      	lsrs	r3, r3, #8
 8001412:	f003 0307 	and.w	r3, r3, #7
 8001416:	4618      	mov	r0, r3
 8001418:	46bd      	mov	sp, r7
 800141a:	bc80      	pop	{r7}
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	e000ed00 	.word	0xe000ed00

08001424 <__NVIC_EnableIRQ>:
 8001424:	b480      	push	{r7}
 8001426:	b083      	sub	sp, #12
 8001428:	af00      	add	r7, sp, #0
 800142a:	4603      	mov	r3, r0
 800142c:	71fb      	strb	r3, [r7, #7]
 800142e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001432:	2b00      	cmp	r3, #0
 8001434:	db0b      	blt.n	800144e <__NVIC_EnableIRQ+0x2a>
 8001436:	79fb      	ldrb	r3, [r7, #7]
 8001438:	f003 021f 	and.w	r2, r3, #31
 800143c:	4906      	ldr	r1, [pc, #24]	; (8001458 <__NVIC_EnableIRQ+0x34>)
 800143e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001442:	095b      	lsrs	r3, r3, #5
 8001444:	2001      	movs	r0, #1
 8001446:	fa00 f202 	lsl.w	r2, r0, r2
 800144a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800144e:	bf00      	nop
 8001450:	370c      	adds	r7, #12
 8001452:	46bd      	mov	sp, r7
 8001454:	bc80      	pop	{r7}
 8001456:	4770      	bx	lr
 8001458:	e000e100 	.word	0xe000e100

0800145c <__NVIC_SetPriority>:
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
 8001462:	4603      	mov	r3, r0
 8001464:	6039      	str	r1, [r7, #0]
 8001466:	71fb      	strb	r3, [r7, #7]
 8001468:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800146c:	2b00      	cmp	r3, #0
 800146e:	db0a      	blt.n	8001486 <__NVIC_SetPriority+0x2a>
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	b2da      	uxtb	r2, r3
 8001474:	490c      	ldr	r1, [pc, #48]	; (80014a8 <__NVIC_SetPriority+0x4c>)
 8001476:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800147a:	0112      	lsls	r2, r2, #4
 800147c:	b2d2      	uxtb	r2, r2
 800147e:	440b      	add	r3, r1
 8001480:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8001484:	e00a      	b.n	800149c <__NVIC_SetPriority+0x40>
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	b2da      	uxtb	r2, r3
 800148a:	4908      	ldr	r1, [pc, #32]	; (80014ac <__NVIC_SetPriority+0x50>)
 800148c:	79fb      	ldrb	r3, [r7, #7]
 800148e:	f003 030f 	and.w	r3, r3, #15
 8001492:	3b04      	subs	r3, #4
 8001494:	0112      	lsls	r2, r2, #4
 8001496:	b2d2      	uxtb	r2, r2
 8001498:	440b      	add	r3, r1
 800149a:	761a      	strb	r2, [r3, #24]
 800149c:	bf00      	nop
 800149e:	370c      	adds	r7, #12
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bc80      	pop	{r7}
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop
 80014a8:	e000e100 	.word	0xe000e100
 80014ac:	e000ed00 	.word	0xe000ed00

080014b0 <NVIC_EncodePriority>:
 80014b0:	b480      	push	{r7}
 80014b2:	b089      	sub	sp, #36	; 0x24
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	60f8      	str	r0, [r7, #12]
 80014b8:	60b9      	str	r1, [r7, #8]
 80014ba:	607a      	str	r2, [r7, #4]
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	f003 0307 	and.w	r3, r3, #7
 80014c2:	61fb      	str	r3, [r7, #28]
 80014c4:	69fb      	ldr	r3, [r7, #28]
 80014c6:	f1c3 0307 	rsb	r3, r3, #7
 80014ca:	2b04      	cmp	r3, #4
 80014cc:	bf28      	it	cs
 80014ce:	2304      	movcs	r3, #4
 80014d0:	61bb      	str	r3, [r7, #24]
 80014d2:	69fb      	ldr	r3, [r7, #28]
 80014d4:	3304      	adds	r3, #4
 80014d6:	2b06      	cmp	r3, #6
 80014d8:	d902      	bls.n	80014e0 <NVIC_EncodePriority+0x30>
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	3b03      	subs	r3, #3
 80014de:	e000      	b.n	80014e2 <NVIC_EncodePriority+0x32>
 80014e0:	2300      	movs	r3, #0
 80014e2:	617b      	str	r3, [r7, #20]
 80014e4:	f04f 32ff 	mov.w	r2, #4294967295
 80014e8:	69bb      	ldr	r3, [r7, #24]
 80014ea:	fa02 f303 	lsl.w	r3, r2, r3
 80014ee:	43da      	mvns	r2, r3
 80014f0:	68bb      	ldr	r3, [r7, #8]
 80014f2:	401a      	ands	r2, r3
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	409a      	lsls	r2, r3
 80014f8:	f04f 31ff 	mov.w	r1, #4294967295
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001502:	43d9      	mvns	r1, r3
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	400b      	ands	r3, r1
 8001508:	4313      	orrs	r3, r2
 800150a:	4618      	mov	r0, r3
 800150c:	3724      	adds	r7, #36	; 0x24
 800150e:	46bd      	mov	sp, r7
 8001510:	bc80      	pop	{r7}
 8001512:	4770      	bx	lr

08001514 <SysTick_Config>:
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	3b01      	subs	r3, #1
 8001520:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001524:	d301      	bcc.n	800152a <SysTick_Config+0x16>
 8001526:	2301      	movs	r3, #1
 8001528:	e00f      	b.n	800154a <SysTick_Config+0x36>
 800152a:	4a0a      	ldr	r2, [pc, #40]	; (8001554 <SysTick_Config+0x40>)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	3b01      	subs	r3, #1
 8001530:	6053      	str	r3, [r2, #4]
 8001532:	210f      	movs	r1, #15
 8001534:	f04f 30ff 	mov.w	r0, #4294967295
 8001538:	f7ff ff90 	bl	800145c <__NVIC_SetPriority>
 800153c:	4b05      	ldr	r3, [pc, #20]	; (8001554 <SysTick_Config+0x40>)
 800153e:	2200      	movs	r2, #0
 8001540:	609a      	str	r2, [r3, #8]
 8001542:	4b04      	ldr	r3, [pc, #16]	; (8001554 <SysTick_Config+0x40>)
 8001544:	2207      	movs	r2, #7
 8001546:	601a      	str	r2, [r3, #0]
 8001548:	2300      	movs	r3, #0
 800154a:	4618      	mov	r0, r3
 800154c:	3708      	adds	r7, #8
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	e000e010 	.word	0xe000e010

08001558 <HAL_NVIC_SetPriorityGrouping>:
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
 8001560:	6878      	ldr	r0, [r7, #4]
 8001562:	f7ff ff2d 	bl	80013c0 <__NVIC_SetPriorityGrouping>
 8001566:	bf00      	nop
 8001568:	3708      	adds	r7, #8
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}

0800156e <HAL_NVIC_SetPriority>:
 800156e:	b580      	push	{r7, lr}
 8001570:	b086      	sub	sp, #24
 8001572:	af00      	add	r7, sp, #0
 8001574:	4603      	mov	r3, r0
 8001576:	60b9      	str	r1, [r7, #8]
 8001578:	607a      	str	r2, [r7, #4]
 800157a:	73fb      	strb	r3, [r7, #15]
 800157c:	2300      	movs	r3, #0
 800157e:	617b      	str	r3, [r7, #20]
 8001580:	f7ff ff42 	bl	8001408 <__NVIC_GetPriorityGrouping>
 8001584:	6178      	str	r0, [r7, #20]
 8001586:	687a      	ldr	r2, [r7, #4]
 8001588:	68b9      	ldr	r1, [r7, #8]
 800158a:	6978      	ldr	r0, [r7, #20]
 800158c:	f7ff ff90 	bl	80014b0 <NVIC_EncodePriority>
 8001590:	4602      	mov	r2, r0
 8001592:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001596:	4611      	mov	r1, r2
 8001598:	4618      	mov	r0, r3
 800159a:	f7ff ff5f 	bl	800145c <__NVIC_SetPriority>
 800159e:	bf00      	nop
 80015a0:	3718      	adds	r7, #24
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}

080015a6 <HAL_NVIC_EnableIRQ>:
 80015a6:	b580      	push	{r7, lr}
 80015a8:	b082      	sub	sp, #8
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	4603      	mov	r3, r0
 80015ae:	71fb      	strb	r3, [r7, #7]
 80015b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b4:	4618      	mov	r0, r3
 80015b6:	f7ff ff35 	bl	8001424 <__NVIC_EnableIRQ>
 80015ba:	bf00      	nop
 80015bc:	3708      	adds	r7, #8
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}

080015c2 <HAL_SYSTICK_Config>:
 80015c2:	b580      	push	{r7, lr}
 80015c4:	b082      	sub	sp, #8
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	6078      	str	r0, [r7, #4]
 80015ca:	6878      	ldr	r0, [r7, #4]
 80015cc:	f7ff ffa2 	bl	8001514 <SysTick_Config>
 80015d0:	4603      	mov	r3, r0
 80015d2:	4618      	mov	r0, r3
 80015d4:	3708      	adds	r7, #8
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
	...

080015dc <HAL_GPIO_Init>:
 80015dc:	b480      	push	{r7}
 80015de:	b08b      	sub	sp, #44	; 0x2c
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
 80015e4:	6039      	str	r1, [r7, #0]
 80015e6:	2300      	movs	r3, #0
 80015e8:	627b      	str	r3, [r7, #36]	; 0x24
 80015ea:	2300      	movs	r3, #0
 80015ec:	623b      	str	r3, [r7, #32]
 80015ee:	e161      	b.n	80018b4 <HAL_GPIO_Init+0x2d8>
 80015f0:	2201      	movs	r2, #1
 80015f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f4:	fa02 f303 	lsl.w	r3, r2, r3
 80015f8:	61fb      	str	r3, [r7, #28]
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	69fa      	ldr	r2, [r7, #28]
 8001600:	4013      	ands	r3, r2
 8001602:	61bb      	str	r3, [r7, #24]
 8001604:	69ba      	ldr	r2, [r7, #24]
 8001606:	69fb      	ldr	r3, [r7, #28]
 8001608:	429a      	cmp	r2, r3
 800160a:	f040 8150 	bne.w	80018ae <HAL_GPIO_Init+0x2d2>
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	4a97      	ldr	r2, [pc, #604]	; (8001870 <HAL_GPIO_Init+0x294>)
 8001614:	4293      	cmp	r3, r2
 8001616:	d05e      	beq.n	80016d6 <HAL_GPIO_Init+0xfa>
 8001618:	4a95      	ldr	r2, [pc, #596]	; (8001870 <HAL_GPIO_Init+0x294>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d875      	bhi.n	800170a <HAL_GPIO_Init+0x12e>
 800161e:	4a95      	ldr	r2, [pc, #596]	; (8001874 <HAL_GPIO_Init+0x298>)
 8001620:	4293      	cmp	r3, r2
 8001622:	d058      	beq.n	80016d6 <HAL_GPIO_Init+0xfa>
 8001624:	4a93      	ldr	r2, [pc, #588]	; (8001874 <HAL_GPIO_Init+0x298>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d86f      	bhi.n	800170a <HAL_GPIO_Init+0x12e>
 800162a:	4a93      	ldr	r2, [pc, #588]	; (8001878 <HAL_GPIO_Init+0x29c>)
 800162c:	4293      	cmp	r3, r2
 800162e:	d052      	beq.n	80016d6 <HAL_GPIO_Init+0xfa>
 8001630:	4a91      	ldr	r2, [pc, #580]	; (8001878 <HAL_GPIO_Init+0x29c>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d869      	bhi.n	800170a <HAL_GPIO_Init+0x12e>
 8001636:	4a91      	ldr	r2, [pc, #580]	; (800187c <HAL_GPIO_Init+0x2a0>)
 8001638:	4293      	cmp	r3, r2
 800163a:	d04c      	beq.n	80016d6 <HAL_GPIO_Init+0xfa>
 800163c:	4a8f      	ldr	r2, [pc, #572]	; (800187c <HAL_GPIO_Init+0x2a0>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d863      	bhi.n	800170a <HAL_GPIO_Init+0x12e>
 8001642:	4a8f      	ldr	r2, [pc, #572]	; (8001880 <HAL_GPIO_Init+0x2a4>)
 8001644:	4293      	cmp	r3, r2
 8001646:	d046      	beq.n	80016d6 <HAL_GPIO_Init+0xfa>
 8001648:	4a8d      	ldr	r2, [pc, #564]	; (8001880 <HAL_GPIO_Init+0x2a4>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d85d      	bhi.n	800170a <HAL_GPIO_Init+0x12e>
 800164e:	2b12      	cmp	r3, #18
 8001650:	d82a      	bhi.n	80016a8 <HAL_GPIO_Init+0xcc>
 8001652:	2b12      	cmp	r3, #18
 8001654:	d859      	bhi.n	800170a <HAL_GPIO_Init+0x12e>
 8001656:	a201      	add	r2, pc, #4	; (adr r2, 800165c <HAL_GPIO_Init+0x80>)
 8001658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800165c:	080016d7 	.word	0x080016d7
 8001660:	080016b1 	.word	0x080016b1
 8001664:	080016c3 	.word	0x080016c3
 8001668:	08001705 	.word	0x08001705
 800166c:	0800170b 	.word	0x0800170b
 8001670:	0800170b 	.word	0x0800170b
 8001674:	0800170b 	.word	0x0800170b
 8001678:	0800170b 	.word	0x0800170b
 800167c:	0800170b 	.word	0x0800170b
 8001680:	0800170b 	.word	0x0800170b
 8001684:	0800170b 	.word	0x0800170b
 8001688:	0800170b 	.word	0x0800170b
 800168c:	0800170b 	.word	0x0800170b
 8001690:	0800170b 	.word	0x0800170b
 8001694:	0800170b 	.word	0x0800170b
 8001698:	0800170b 	.word	0x0800170b
 800169c:	0800170b 	.word	0x0800170b
 80016a0:	080016b9 	.word	0x080016b9
 80016a4:	080016cd 	.word	0x080016cd
 80016a8:	4a76      	ldr	r2, [pc, #472]	; (8001884 <HAL_GPIO_Init+0x2a8>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d013      	beq.n	80016d6 <HAL_GPIO_Init+0xfa>
 80016ae:	e02c      	b.n	800170a <HAL_GPIO_Init+0x12e>
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	68db      	ldr	r3, [r3, #12]
 80016b4:	623b      	str	r3, [r7, #32]
 80016b6:	e029      	b.n	800170c <HAL_GPIO_Init+0x130>
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	68db      	ldr	r3, [r3, #12]
 80016bc:	3304      	adds	r3, #4
 80016be:	623b      	str	r3, [r7, #32]
 80016c0:	e024      	b.n	800170c <HAL_GPIO_Init+0x130>
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	68db      	ldr	r3, [r3, #12]
 80016c6:	3308      	adds	r3, #8
 80016c8:	623b      	str	r3, [r7, #32]
 80016ca:	e01f      	b.n	800170c <HAL_GPIO_Init+0x130>
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	68db      	ldr	r3, [r3, #12]
 80016d0:	330c      	adds	r3, #12
 80016d2:	623b      	str	r3, [r7, #32]
 80016d4:	e01a      	b.n	800170c <HAL_GPIO_Init+0x130>
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d102      	bne.n	80016e4 <HAL_GPIO_Init+0x108>
 80016de:	2304      	movs	r3, #4
 80016e0:	623b      	str	r3, [r7, #32]
 80016e2:	e013      	b.n	800170c <HAL_GPIO_Init+0x130>
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	2b01      	cmp	r3, #1
 80016ea:	d105      	bne.n	80016f8 <HAL_GPIO_Init+0x11c>
 80016ec:	2308      	movs	r3, #8
 80016ee:	623b      	str	r3, [r7, #32]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	69fa      	ldr	r2, [r7, #28]
 80016f4:	611a      	str	r2, [r3, #16]
 80016f6:	e009      	b.n	800170c <HAL_GPIO_Init+0x130>
 80016f8:	2308      	movs	r3, #8
 80016fa:	623b      	str	r3, [r7, #32]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	69fa      	ldr	r2, [r7, #28]
 8001700:	615a      	str	r2, [r3, #20]
 8001702:	e003      	b.n	800170c <HAL_GPIO_Init+0x130>
 8001704:	2300      	movs	r3, #0
 8001706:	623b      	str	r3, [r7, #32]
 8001708:	e000      	b.n	800170c <HAL_GPIO_Init+0x130>
 800170a:	bf00      	nop
 800170c:	69bb      	ldr	r3, [r7, #24]
 800170e:	2bff      	cmp	r3, #255	; 0xff
 8001710:	d801      	bhi.n	8001716 <HAL_GPIO_Init+0x13a>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	e001      	b.n	800171a <HAL_GPIO_Init+0x13e>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	3304      	adds	r3, #4
 800171a:	617b      	str	r3, [r7, #20]
 800171c:	69bb      	ldr	r3, [r7, #24]
 800171e:	2bff      	cmp	r3, #255	; 0xff
 8001720:	d802      	bhi.n	8001728 <HAL_GPIO_Init+0x14c>
 8001722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001724:	009b      	lsls	r3, r3, #2
 8001726:	e002      	b.n	800172e <HAL_GPIO_Init+0x152>
 8001728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800172a:	3b08      	subs	r3, #8
 800172c:	009b      	lsls	r3, r3, #2
 800172e:	613b      	str	r3, [r7, #16]
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	210f      	movs	r1, #15
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	fa01 f303 	lsl.w	r3, r1, r3
 800173c:	43db      	mvns	r3, r3
 800173e:	401a      	ands	r2, r3
 8001740:	6a39      	ldr	r1, [r7, #32]
 8001742:	693b      	ldr	r3, [r7, #16]
 8001744:	fa01 f303 	lsl.w	r3, r1, r3
 8001748:	431a      	orrs	r2, r3
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	601a      	str	r2, [r3, #0]
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001756:	2b00      	cmp	r3, #0
 8001758:	f000 80a9 	beq.w	80018ae <HAL_GPIO_Init+0x2d2>
 800175c:	4b4a      	ldr	r3, [pc, #296]	; (8001888 <HAL_GPIO_Init+0x2ac>)
 800175e:	699b      	ldr	r3, [r3, #24]
 8001760:	4a49      	ldr	r2, [pc, #292]	; (8001888 <HAL_GPIO_Init+0x2ac>)
 8001762:	f043 0301 	orr.w	r3, r3, #1
 8001766:	6193      	str	r3, [r2, #24]
 8001768:	4b47      	ldr	r3, [pc, #284]	; (8001888 <HAL_GPIO_Init+0x2ac>)
 800176a:	699b      	ldr	r3, [r3, #24]
 800176c:	f003 0301 	and.w	r3, r3, #1
 8001770:	60bb      	str	r3, [r7, #8]
 8001772:	68bb      	ldr	r3, [r7, #8]
 8001774:	4a45      	ldr	r2, [pc, #276]	; (800188c <HAL_GPIO_Init+0x2b0>)
 8001776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001778:	089b      	lsrs	r3, r3, #2
 800177a:	3302      	adds	r3, #2
 800177c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001780:	60fb      	str	r3, [r7, #12]
 8001782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001784:	f003 0303 	and.w	r3, r3, #3
 8001788:	009b      	lsls	r3, r3, #2
 800178a:	220f      	movs	r2, #15
 800178c:	fa02 f303 	lsl.w	r3, r2, r3
 8001790:	43db      	mvns	r3, r3
 8001792:	68fa      	ldr	r2, [r7, #12]
 8001794:	4013      	ands	r3, r2
 8001796:	60fb      	str	r3, [r7, #12]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	4a3d      	ldr	r2, [pc, #244]	; (8001890 <HAL_GPIO_Init+0x2b4>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d00d      	beq.n	80017bc <HAL_GPIO_Init+0x1e0>
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	4a3c      	ldr	r2, [pc, #240]	; (8001894 <HAL_GPIO_Init+0x2b8>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d007      	beq.n	80017b8 <HAL_GPIO_Init+0x1dc>
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	4a3b      	ldr	r2, [pc, #236]	; (8001898 <HAL_GPIO_Init+0x2bc>)
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d101      	bne.n	80017b4 <HAL_GPIO_Init+0x1d8>
 80017b0:	2302      	movs	r3, #2
 80017b2:	e004      	b.n	80017be <HAL_GPIO_Init+0x1e2>
 80017b4:	2303      	movs	r3, #3
 80017b6:	e002      	b.n	80017be <HAL_GPIO_Init+0x1e2>
 80017b8:	2301      	movs	r3, #1
 80017ba:	e000      	b.n	80017be <HAL_GPIO_Init+0x1e2>
 80017bc:	2300      	movs	r3, #0
 80017be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017c0:	f002 0203 	and.w	r2, r2, #3
 80017c4:	0092      	lsls	r2, r2, #2
 80017c6:	4093      	lsls	r3, r2
 80017c8:	68fa      	ldr	r2, [r7, #12]
 80017ca:	4313      	orrs	r3, r2
 80017cc:	60fb      	str	r3, [r7, #12]
 80017ce:	492f      	ldr	r1, [pc, #188]	; (800188c <HAL_GPIO_Init+0x2b0>)
 80017d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d2:	089b      	lsrs	r3, r3, #2
 80017d4:	3302      	adds	r3, #2
 80017d6:	68fa      	ldr	r2, [r7, #12]
 80017d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d006      	beq.n	80017f6 <HAL_GPIO_Init+0x21a>
 80017e8:	4b2c      	ldr	r3, [pc, #176]	; (800189c <HAL_GPIO_Init+0x2c0>)
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	492b      	ldr	r1, [pc, #172]	; (800189c <HAL_GPIO_Init+0x2c0>)
 80017ee:	69bb      	ldr	r3, [r7, #24]
 80017f0:	4313      	orrs	r3, r2
 80017f2:	600b      	str	r3, [r1, #0]
 80017f4:	e006      	b.n	8001804 <HAL_GPIO_Init+0x228>
 80017f6:	4b29      	ldr	r3, [pc, #164]	; (800189c <HAL_GPIO_Init+0x2c0>)
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	69bb      	ldr	r3, [r7, #24]
 80017fc:	43db      	mvns	r3, r3
 80017fe:	4927      	ldr	r1, [pc, #156]	; (800189c <HAL_GPIO_Init+0x2c0>)
 8001800:	4013      	ands	r3, r2
 8001802:	600b      	str	r3, [r1, #0]
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800180c:	2b00      	cmp	r3, #0
 800180e:	d006      	beq.n	800181e <HAL_GPIO_Init+0x242>
 8001810:	4b22      	ldr	r3, [pc, #136]	; (800189c <HAL_GPIO_Init+0x2c0>)
 8001812:	685a      	ldr	r2, [r3, #4]
 8001814:	4921      	ldr	r1, [pc, #132]	; (800189c <HAL_GPIO_Init+0x2c0>)
 8001816:	69bb      	ldr	r3, [r7, #24]
 8001818:	4313      	orrs	r3, r2
 800181a:	604b      	str	r3, [r1, #4]
 800181c:	e006      	b.n	800182c <HAL_GPIO_Init+0x250>
 800181e:	4b1f      	ldr	r3, [pc, #124]	; (800189c <HAL_GPIO_Init+0x2c0>)
 8001820:	685a      	ldr	r2, [r3, #4]
 8001822:	69bb      	ldr	r3, [r7, #24]
 8001824:	43db      	mvns	r3, r3
 8001826:	491d      	ldr	r1, [pc, #116]	; (800189c <HAL_GPIO_Init+0x2c0>)
 8001828:	4013      	ands	r3, r2
 800182a:	604b      	str	r3, [r1, #4]
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001834:	2b00      	cmp	r3, #0
 8001836:	d006      	beq.n	8001846 <HAL_GPIO_Init+0x26a>
 8001838:	4b18      	ldr	r3, [pc, #96]	; (800189c <HAL_GPIO_Init+0x2c0>)
 800183a:	689a      	ldr	r2, [r3, #8]
 800183c:	4917      	ldr	r1, [pc, #92]	; (800189c <HAL_GPIO_Init+0x2c0>)
 800183e:	69bb      	ldr	r3, [r7, #24]
 8001840:	4313      	orrs	r3, r2
 8001842:	608b      	str	r3, [r1, #8]
 8001844:	e006      	b.n	8001854 <HAL_GPIO_Init+0x278>
 8001846:	4b15      	ldr	r3, [pc, #84]	; (800189c <HAL_GPIO_Init+0x2c0>)
 8001848:	689a      	ldr	r2, [r3, #8]
 800184a:	69bb      	ldr	r3, [r7, #24]
 800184c:	43db      	mvns	r3, r3
 800184e:	4913      	ldr	r1, [pc, #76]	; (800189c <HAL_GPIO_Init+0x2c0>)
 8001850:	4013      	ands	r3, r2
 8001852:	608b      	str	r3, [r1, #8]
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800185c:	2b00      	cmp	r3, #0
 800185e:	d01f      	beq.n	80018a0 <HAL_GPIO_Init+0x2c4>
 8001860:	4b0e      	ldr	r3, [pc, #56]	; (800189c <HAL_GPIO_Init+0x2c0>)
 8001862:	68da      	ldr	r2, [r3, #12]
 8001864:	490d      	ldr	r1, [pc, #52]	; (800189c <HAL_GPIO_Init+0x2c0>)
 8001866:	69bb      	ldr	r3, [r7, #24]
 8001868:	4313      	orrs	r3, r2
 800186a:	60cb      	str	r3, [r1, #12]
 800186c:	e01f      	b.n	80018ae <HAL_GPIO_Init+0x2d2>
 800186e:	bf00      	nop
 8001870:	10320000 	.word	0x10320000
 8001874:	10310000 	.word	0x10310000
 8001878:	10220000 	.word	0x10220000
 800187c:	10210000 	.word	0x10210000
 8001880:	10120000 	.word	0x10120000
 8001884:	10110000 	.word	0x10110000
 8001888:	40021000 	.word	0x40021000
 800188c:	40010000 	.word	0x40010000
 8001890:	40010800 	.word	0x40010800
 8001894:	40010c00 	.word	0x40010c00
 8001898:	40011000 	.word	0x40011000
 800189c:	40010400 	.word	0x40010400
 80018a0:	4b0b      	ldr	r3, [pc, #44]	; (80018d0 <HAL_GPIO_Init+0x2f4>)
 80018a2:	68da      	ldr	r2, [r3, #12]
 80018a4:	69bb      	ldr	r3, [r7, #24]
 80018a6:	43db      	mvns	r3, r3
 80018a8:	4909      	ldr	r1, [pc, #36]	; (80018d0 <HAL_GPIO_Init+0x2f4>)
 80018aa:	4013      	ands	r3, r2
 80018ac:	60cb      	str	r3, [r1, #12]
 80018ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b0:	3301      	adds	r3, #1
 80018b2:	627b      	str	r3, [r7, #36]	; 0x24
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ba:	fa22 f303 	lsr.w	r3, r2, r3
 80018be:	2b00      	cmp	r3, #0
 80018c0:	f47f ae96 	bne.w	80015f0 <HAL_GPIO_Init+0x14>
 80018c4:	bf00      	nop
 80018c6:	bf00      	nop
 80018c8:	372c      	adds	r7, #44	; 0x2c
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bc80      	pop	{r7}
 80018ce:	4770      	bx	lr
 80018d0:	40010400 	.word	0x40010400

080018d4 <HAL_GPIO_ReadPin>:
 80018d4:	b480      	push	{r7}
 80018d6:	b085      	sub	sp, #20
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
 80018dc:	460b      	mov	r3, r1
 80018de:	807b      	strh	r3, [r7, #2]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	689a      	ldr	r2, [r3, #8]
 80018e4:	887b      	ldrh	r3, [r7, #2]
 80018e6:	4013      	ands	r3, r2
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d002      	beq.n	80018f2 <HAL_GPIO_ReadPin+0x1e>
 80018ec:	2301      	movs	r3, #1
 80018ee:	73fb      	strb	r3, [r7, #15]
 80018f0:	e001      	b.n	80018f6 <HAL_GPIO_ReadPin+0x22>
 80018f2:	2300      	movs	r3, #0
 80018f4:	73fb      	strb	r3, [r7, #15]
 80018f6:	7bfb      	ldrb	r3, [r7, #15]
 80018f8:	4618      	mov	r0, r3
 80018fa:	3714      	adds	r7, #20
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bc80      	pop	{r7}
 8001900:	4770      	bx	lr

08001902 <HAL_GPIO_WritePin>:
 8001902:	b480      	push	{r7}
 8001904:	b083      	sub	sp, #12
 8001906:	af00      	add	r7, sp, #0
 8001908:	6078      	str	r0, [r7, #4]
 800190a:	460b      	mov	r3, r1
 800190c:	807b      	strh	r3, [r7, #2]
 800190e:	4613      	mov	r3, r2
 8001910:	707b      	strb	r3, [r7, #1]
 8001912:	787b      	ldrb	r3, [r7, #1]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d003      	beq.n	8001920 <HAL_GPIO_WritePin+0x1e>
 8001918:	887a      	ldrh	r2, [r7, #2]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	611a      	str	r2, [r3, #16]
 800191e:	e003      	b.n	8001928 <HAL_GPIO_WritePin+0x26>
 8001920:	887b      	ldrh	r3, [r7, #2]
 8001922:	041a      	lsls	r2, r3, #16
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	611a      	str	r2, [r3, #16]
 8001928:	bf00      	nop
 800192a:	370c      	adds	r7, #12
 800192c:	46bd      	mov	sp, r7
 800192e:	bc80      	pop	{r7}
 8001930:	4770      	bx	lr

08001932 <HAL_GPIO_TogglePin>:
 8001932:	b480      	push	{r7}
 8001934:	b085      	sub	sp, #20
 8001936:	af00      	add	r7, sp, #0
 8001938:	6078      	str	r0, [r7, #4]
 800193a:	460b      	mov	r3, r1
 800193c:	807b      	strh	r3, [r7, #2]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	68db      	ldr	r3, [r3, #12]
 8001942:	60fb      	str	r3, [r7, #12]
 8001944:	887a      	ldrh	r2, [r7, #2]
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	4013      	ands	r3, r2
 800194a:	041a      	lsls	r2, r3, #16
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	43d9      	mvns	r1, r3
 8001950:	887b      	ldrh	r3, [r7, #2]
 8001952:	400b      	ands	r3, r1
 8001954:	431a      	orrs	r2, r3
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	611a      	str	r2, [r3, #16]
 800195a:	bf00      	nop
 800195c:	3714      	adds	r7, #20
 800195e:	46bd      	mov	sp, r7
 8001960:	bc80      	pop	{r7}
 8001962:	4770      	bx	lr

08001964 <HAL_RCC_OscConfig>:
 8001964:	b580      	push	{r7, lr}
 8001966:	b086      	sub	sp, #24
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d101      	bne.n	8001976 <HAL_RCC_OscConfig+0x12>
 8001972:	2301      	movs	r3, #1
 8001974:	e272      	b.n	8001e5c <HAL_RCC_OscConfig+0x4f8>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f003 0301 	and.w	r3, r3, #1
 800197e:	2b00      	cmp	r3, #0
 8001980:	f000 8087 	beq.w	8001a92 <HAL_RCC_OscConfig+0x12e>
 8001984:	4b92      	ldr	r3, [pc, #584]	; (8001bd0 <HAL_RCC_OscConfig+0x26c>)
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	f003 030c 	and.w	r3, r3, #12
 800198c:	2b04      	cmp	r3, #4
 800198e:	d00c      	beq.n	80019aa <HAL_RCC_OscConfig+0x46>
 8001990:	4b8f      	ldr	r3, [pc, #572]	; (8001bd0 <HAL_RCC_OscConfig+0x26c>)
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	f003 030c 	and.w	r3, r3, #12
 8001998:	2b08      	cmp	r3, #8
 800199a:	d112      	bne.n	80019c2 <HAL_RCC_OscConfig+0x5e>
 800199c:	4b8c      	ldr	r3, [pc, #560]	; (8001bd0 <HAL_RCC_OscConfig+0x26c>)
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019a8:	d10b      	bne.n	80019c2 <HAL_RCC_OscConfig+0x5e>
 80019aa:	4b89      	ldr	r3, [pc, #548]	; (8001bd0 <HAL_RCC_OscConfig+0x26c>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d06c      	beq.n	8001a90 <HAL_RCC_OscConfig+0x12c>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d168      	bne.n	8001a90 <HAL_RCC_OscConfig+0x12c>
 80019be:	2301      	movs	r3, #1
 80019c0:	e24c      	b.n	8001e5c <HAL_RCC_OscConfig+0x4f8>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019ca:	d106      	bne.n	80019da <HAL_RCC_OscConfig+0x76>
 80019cc:	4b80      	ldr	r3, [pc, #512]	; (8001bd0 <HAL_RCC_OscConfig+0x26c>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a7f      	ldr	r2, [pc, #508]	; (8001bd0 <HAL_RCC_OscConfig+0x26c>)
 80019d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019d6:	6013      	str	r3, [r2, #0]
 80019d8:	e02e      	b.n	8001a38 <HAL_RCC_OscConfig+0xd4>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d10c      	bne.n	80019fc <HAL_RCC_OscConfig+0x98>
 80019e2:	4b7b      	ldr	r3, [pc, #492]	; (8001bd0 <HAL_RCC_OscConfig+0x26c>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a7a      	ldr	r2, [pc, #488]	; (8001bd0 <HAL_RCC_OscConfig+0x26c>)
 80019e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019ec:	6013      	str	r3, [r2, #0]
 80019ee:	4b78      	ldr	r3, [pc, #480]	; (8001bd0 <HAL_RCC_OscConfig+0x26c>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a77      	ldr	r2, [pc, #476]	; (8001bd0 <HAL_RCC_OscConfig+0x26c>)
 80019f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019f8:	6013      	str	r3, [r2, #0]
 80019fa:	e01d      	b.n	8001a38 <HAL_RCC_OscConfig+0xd4>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a04:	d10c      	bne.n	8001a20 <HAL_RCC_OscConfig+0xbc>
 8001a06:	4b72      	ldr	r3, [pc, #456]	; (8001bd0 <HAL_RCC_OscConfig+0x26c>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a71      	ldr	r2, [pc, #452]	; (8001bd0 <HAL_RCC_OscConfig+0x26c>)
 8001a0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a10:	6013      	str	r3, [r2, #0]
 8001a12:	4b6f      	ldr	r3, [pc, #444]	; (8001bd0 <HAL_RCC_OscConfig+0x26c>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a6e      	ldr	r2, [pc, #440]	; (8001bd0 <HAL_RCC_OscConfig+0x26c>)
 8001a18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a1c:	6013      	str	r3, [r2, #0]
 8001a1e:	e00b      	b.n	8001a38 <HAL_RCC_OscConfig+0xd4>
 8001a20:	4b6b      	ldr	r3, [pc, #428]	; (8001bd0 <HAL_RCC_OscConfig+0x26c>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a6a      	ldr	r2, [pc, #424]	; (8001bd0 <HAL_RCC_OscConfig+0x26c>)
 8001a26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a2a:	6013      	str	r3, [r2, #0]
 8001a2c:	4b68      	ldr	r3, [pc, #416]	; (8001bd0 <HAL_RCC_OscConfig+0x26c>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a67      	ldr	r2, [pc, #412]	; (8001bd0 <HAL_RCC_OscConfig+0x26c>)
 8001a32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a36:	6013      	str	r3, [r2, #0]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d013      	beq.n	8001a68 <HAL_RCC_OscConfig+0x104>
 8001a40:	f7ff fcb4 	bl	80013ac <HAL_GetTick>
 8001a44:	6138      	str	r0, [r7, #16]
 8001a46:	e008      	b.n	8001a5a <HAL_RCC_OscConfig+0xf6>
 8001a48:	f7ff fcb0 	bl	80013ac <HAL_GetTick>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	2b64      	cmp	r3, #100	; 0x64
 8001a54:	d901      	bls.n	8001a5a <HAL_RCC_OscConfig+0xf6>
 8001a56:	2303      	movs	r3, #3
 8001a58:	e200      	b.n	8001e5c <HAL_RCC_OscConfig+0x4f8>
 8001a5a:	4b5d      	ldr	r3, [pc, #372]	; (8001bd0 <HAL_RCC_OscConfig+0x26c>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d0f0      	beq.n	8001a48 <HAL_RCC_OscConfig+0xe4>
 8001a66:	e014      	b.n	8001a92 <HAL_RCC_OscConfig+0x12e>
 8001a68:	f7ff fca0 	bl	80013ac <HAL_GetTick>
 8001a6c:	6138      	str	r0, [r7, #16]
 8001a6e:	e008      	b.n	8001a82 <HAL_RCC_OscConfig+0x11e>
 8001a70:	f7ff fc9c 	bl	80013ac <HAL_GetTick>
 8001a74:	4602      	mov	r2, r0
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	2b64      	cmp	r3, #100	; 0x64
 8001a7c:	d901      	bls.n	8001a82 <HAL_RCC_OscConfig+0x11e>
 8001a7e:	2303      	movs	r3, #3
 8001a80:	e1ec      	b.n	8001e5c <HAL_RCC_OscConfig+0x4f8>
 8001a82:	4b53      	ldr	r3, [pc, #332]	; (8001bd0 <HAL_RCC_OscConfig+0x26c>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d1f0      	bne.n	8001a70 <HAL_RCC_OscConfig+0x10c>
 8001a8e:	e000      	b.n	8001a92 <HAL_RCC_OscConfig+0x12e>
 8001a90:	bf00      	nop
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 0302 	and.w	r3, r3, #2
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d063      	beq.n	8001b66 <HAL_RCC_OscConfig+0x202>
 8001a9e:	4b4c      	ldr	r3, [pc, #304]	; (8001bd0 <HAL_RCC_OscConfig+0x26c>)
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	f003 030c 	and.w	r3, r3, #12
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d00b      	beq.n	8001ac2 <HAL_RCC_OscConfig+0x15e>
 8001aaa:	4b49      	ldr	r3, [pc, #292]	; (8001bd0 <HAL_RCC_OscConfig+0x26c>)
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	f003 030c 	and.w	r3, r3, #12
 8001ab2:	2b08      	cmp	r3, #8
 8001ab4:	d11c      	bne.n	8001af0 <HAL_RCC_OscConfig+0x18c>
 8001ab6:	4b46      	ldr	r3, [pc, #280]	; (8001bd0 <HAL_RCC_OscConfig+0x26c>)
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d116      	bne.n	8001af0 <HAL_RCC_OscConfig+0x18c>
 8001ac2:	4b43      	ldr	r3, [pc, #268]	; (8001bd0 <HAL_RCC_OscConfig+0x26c>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f003 0302 	and.w	r3, r3, #2
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d005      	beq.n	8001ada <HAL_RCC_OscConfig+0x176>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	691b      	ldr	r3, [r3, #16]
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d001      	beq.n	8001ada <HAL_RCC_OscConfig+0x176>
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e1c0      	b.n	8001e5c <HAL_RCC_OscConfig+0x4f8>
 8001ada:	4b3d      	ldr	r3, [pc, #244]	; (8001bd0 <HAL_RCC_OscConfig+0x26c>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	695b      	ldr	r3, [r3, #20]
 8001ae6:	00db      	lsls	r3, r3, #3
 8001ae8:	4939      	ldr	r1, [pc, #228]	; (8001bd0 <HAL_RCC_OscConfig+0x26c>)
 8001aea:	4313      	orrs	r3, r2
 8001aec:	600b      	str	r3, [r1, #0]
 8001aee:	e03a      	b.n	8001b66 <HAL_RCC_OscConfig+0x202>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	691b      	ldr	r3, [r3, #16]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d020      	beq.n	8001b3a <HAL_RCC_OscConfig+0x1d6>
 8001af8:	4b36      	ldr	r3, [pc, #216]	; (8001bd4 <HAL_RCC_OscConfig+0x270>)
 8001afa:	2201      	movs	r2, #1
 8001afc:	601a      	str	r2, [r3, #0]
 8001afe:	f7ff fc55 	bl	80013ac <HAL_GetTick>
 8001b02:	6138      	str	r0, [r7, #16]
 8001b04:	e008      	b.n	8001b18 <HAL_RCC_OscConfig+0x1b4>
 8001b06:	f7ff fc51 	bl	80013ac <HAL_GetTick>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	1ad3      	subs	r3, r2, r3
 8001b10:	2b02      	cmp	r3, #2
 8001b12:	d901      	bls.n	8001b18 <HAL_RCC_OscConfig+0x1b4>
 8001b14:	2303      	movs	r3, #3
 8001b16:	e1a1      	b.n	8001e5c <HAL_RCC_OscConfig+0x4f8>
 8001b18:	4b2d      	ldr	r3, [pc, #180]	; (8001bd0 <HAL_RCC_OscConfig+0x26c>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f003 0302 	and.w	r3, r3, #2
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d0f0      	beq.n	8001b06 <HAL_RCC_OscConfig+0x1a2>
 8001b24:	4b2a      	ldr	r3, [pc, #168]	; (8001bd0 <HAL_RCC_OscConfig+0x26c>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	695b      	ldr	r3, [r3, #20]
 8001b30:	00db      	lsls	r3, r3, #3
 8001b32:	4927      	ldr	r1, [pc, #156]	; (8001bd0 <HAL_RCC_OscConfig+0x26c>)
 8001b34:	4313      	orrs	r3, r2
 8001b36:	600b      	str	r3, [r1, #0]
 8001b38:	e015      	b.n	8001b66 <HAL_RCC_OscConfig+0x202>
 8001b3a:	4b26      	ldr	r3, [pc, #152]	; (8001bd4 <HAL_RCC_OscConfig+0x270>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	601a      	str	r2, [r3, #0]
 8001b40:	f7ff fc34 	bl	80013ac <HAL_GetTick>
 8001b44:	6138      	str	r0, [r7, #16]
 8001b46:	e008      	b.n	8001b5a <HAL_RCC_OscConfig+0x1f6>
 8001b48:	f7ff fc30 	bl	80013ac <HAL_GetTick>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	2b02      	cmp	r3, #2
 8001b54:	d901      	bls.n	8001b5a <HAL_RCC_OscConfig+0x1f6>
 8001b56:	2303      	movs	r3, #3
 8001b58:	e180      	b.n	8001e5c <HAL_RCC_OscConfig+0x4f8>
 8001b5a:	4b1d      	ldr	r3, [pc, #116]	; (8001bd0 <HAL_RCC_OscConfig+0x26c>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 0302 	and.w	r3, r3, #2
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d1f0      	bne.n	8001b48 <HAL_RCC_OscConfig+0x1e4>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 0308 	and.w	r3, r3, #8
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d03a      	beq.n	8001be8 <HAL_RCC_OscConfig+0x284>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	699b      	ldr	r3, [r3, #24]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d019      	beq.n	8001bae <HAL_RCC_OscConfig+0x24a>
 8001b7a:	4b17      	ldr	r3, [pc, #92]	; (8001bd8 <HAL_RCC_OscConfig+0x274>)
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	601a      	str	r2, [r3, #0]
 8001b80:	f7ff fc14 	bl	80013ac <HAL_GetTick>
 8001b84:	6138      	str	r0, [r7, #16]
 8001b86:	e008      	b.n	8001b9a <HAL_RCC_OscConfig+0x236>
 8001b88:	f7ff fc10 	bl	80013ac <HAL_GetTick>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	2b02      	cmp	r3, #2
 8001b94:	d901      	bls.n	8001b9a <HAL_RCC_OscConfig+0x236>
 8001b96:	2303      	movs	r3, #3
 8001b98:	e160      	b.n	8001e5c <HAL_RCC_OscConfig+0x4f8>
 8001b9a:	4b0d      	ldr	r3, [pc, #52]	; (8001bd0 <HAL_RCC_OscConfig+0x26c>)
 8001b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b9e:	f003 0302 	and.w	r3, r3, #2
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d0f0      	beq.n	8001b88 <HAL_RCC_OscConfig+0x224>
 8001ba6:	2001      	movs	r0, #1
 8001ba8:	f000 faa6 	bl	80020f8 <RCC_Delay>
 8001bac:	e01c      	b.n	8001be8 <HAL_RCC_OscConfig+0x284>
 8001bae:	4b0a      	ldr	r3, [pc, #40]	; (8001bd8 <HAL_RCC_OscConfig+0x274>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	601a      	str	r2, [r3, #0]
 8001bb4:	f7ff fbfa 	bl	80013ac <HAL_GetTick>
 8001bb8:	6138      	str	r0, [r7, #16]
 8001bba:	e00f      	b.n	8001bdc <HAL_RCC_OscConfig+0x278>
 8001bbc:	f7ff fbf6 	bl	80013ac <HAL_GetTick>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	2b02      	cmp	r3, #2
 8001bc8:	d908      	bls.n	8001bdc <HAL_RCC_OscConfig+0x278>
 8001bca:	2303      	movs	r3, #3
 8001bcc:	e146      	b.n	8001e5c <HAL_RCC_OscConfig+0x4f8>
 8001bce:	bf00      	nop
 8001bd0:	40021000 	.word	0x40021000
 8001bd4:	42420000 	.word	0x42420000
 8001bd8:	42420480 	.word	0x42420480
 8001bdc:	4b92      	ldr	r3, [pc, #584]	; (8001e28 <HAL_RCC_OscConfig+0x4c4>)
 8001bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001be0:	f003 0302 	and.w	r3, r3, #2
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d1e9      	bne.n	8001bbc <HAL_RCC_OscConfig+0x258>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f003 0304 	and.w	r3, r3, #4
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	f000 80a6 	beq.w	8001d42 <HAL_RCC_OscConfig+0x3de>
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	75fb      	strb	r3, [r7, #23]
 8001bfa:	4b8b      	ldr	r3, [pc, #556]	; (8001e28 <HAL_RCC_OscConfig+0x4c4>)
 8001bfc:	69db      	ldr	r3, [r3, #28]
 8001bfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d10d      	bne.n	8001c22 <HAL_RCC_OscConfig+0x2be>
 8001c06:	4b88      	ldr	r3, [pc, #544]	; (8001e28 <HAL_RCC_OscConfig+0x4c4>)
 8001c08:	69db      	ldr	r3, [r3, #28]
 8001c0a:	4a87      	ldr	r2, [pc, #540]	; (8001e28 <HAL_RCC_OscConfig+0x4c4>)
 8001c0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c10:	61d3      	str	r3, [r2, #28]
 8001c12:	4b85      	ldr	r3, [pc, #532]	; (8001e28 <HAL_RCC_OscConfig+0x4c4>)
 8001c14:	69db      	ldr	r3, [r3, #28]
 8001c16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c1a:	60bb      	str	r3, [r7, #8]
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	2301      	movs	r3, #1
 8001c20:	75fb      	strb	r3, [r7, #23]
 8001c22:	4b82      	ldr	r3, [pc, #520]	; (8001e2c <HAL_RCC_OscConfig+0x4c8>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d118      	bne.n	8001c60 <HAL_RCC_OscConfig+0x2fc>
 8001c2e:	4b7f      	ldr	r3, [pc, #508]	; (8001e2c <HAL_RCC_OscConfig+0x4c8>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a7e      	ldr	r2, [pc, #504]	; (8001e2c <HAL_RCC_OscConfig+0x4c8>)
 8001c34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c38:	6013      	str	r3, [r2, #0]
 8001c3a:	f7ff fbb7 	bl	80013ac <HAL_GetTick>
 8001c3e:	6138      	str	r0, [r7, #16]
 8001c40:	e008      	b.n	8001c54 <HAL_RCC_OscConfig+0x2f0>
 8001c42:	f7ff fbb3 	bl	80013ac <HAL_GetTick>
 8001c46:	4602      	mov	r2, r0
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	1ad3      	subs	r3, r2, r3
 8001c4c:	2b64      	cmp	r3, #100	; 0x64
 8001c4e:	d901      	bls.n	8001c54 <HAL_RCC_OscConfig+0x2f0>
 8001c50:	2303      	movs	r3, #3
 8001c52:	e103      	b.n	8001e5c <HAL_RCC_OscConfig+0x4f8>
 8001c54:	4b75      	ldr	r3, [pc, #468]	; (8001e2c <HAL_RCC_OscConfig+0x4c8>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d0f0      	beq.n	8001c42 <HAL_RCC_OscConfig+0x2de>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d106      	bne.n	8001c76 <HAL_RCC_OscConfig+0x312>
 8001c68:	4b6f      	ldr	r3, [pc, #444]	; (8001e28 <HAL_RCC_OscConfig+0x4c4>)
 8001c6a:	6a1b      	ldr	r3, [r3, #32]
 8001c6c:	4a6e      	ldr	r2, [pc, #440]	; (8001e28 <HAL_RCC_OscConfig+0x4c4>)
 8001c6e:	f043 0301 	orr.w	r3, r3, #1
 8001c72:	6213      	str	r3, [r2, #32]
 8001c74:	e02d      	b.n	8001cd2 <HAL_RCC_OscConfig+0x36e>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	68db      	ldr	r3, [r3, #12]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d10c      	bne.n	8001c98 <HAL_RCC_OscConfig+0x334>
 8001c7e:	4b6a      	ldr	r3, [pc, #424]	; (8001e28 <HAL_RCC_OscConfig+0x4c4>)
 8001c80:	6a1b      	ldr	r3, [r3, #32]
 8001c82:	4a69      	ldr	r2, [pc, #420]	; (8001e28 <HAL_RCC_OscConfig+0x4c4>)
 8001c84:	f023 0301 	bic.w	r3, r3, #1
 8001c88:	6213      	str	r3, [r2, #32]
 8001c8a:	4b67      	ldr	r3, [pc, #412]	; (8001e28 <HAL_RCC_OscConfig+0x4c4>)
 8001c8c:	6a1b      	ldr	r3, [r3, #32]
 8001c8e:	4a66      	ldr	r2, [pc, #408]	; (8001e28 <HAL_RCC_OscConfig+0x4c4>)
 8001c90:	f023 0304 	bic.w	r3, r3, #4
 8001c94:	6213      	str	r3, [r2, #32]
 8001c96:	e01c      	b.n	8001cd2 <HAL_RCC_OscConfig+0x36e>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	68db      	ldr	r3, [r3, #12]
 8001c9c:	2b05      	cmp	r3, #5
 8001c9e:	d10c      	bne.n	8001cba <HAL_RCC_OscConfig+0x356>
 8001ca0:	4b61      	ldr	r3, [pc, #388]	; (8001e28 <HAL_RCC_OscConfig+0x4c4>)
 8001ca2:	6a1b      	ldr	r3, [r3, #32]
 8001ca4:	4a60      	ldr	r2, [pc, #384]	; (8001e28 <HAL_RCC_OscConfig+0x4c4>)
 8001ca6:	f043 0304 	orr.w	r3, r3, #4
 8001caa:	6213      	str	r3, [r2, #32]
 8001cac:	4b5e      	ldr	r3, [pc, #376]	; (8001e28 <HAL_RCC_OscConfig+0x4c4>)
 8001cae:	6a1b      	ldr	r3, [r3, #32]
 8001cb0:	4a5d      	ldr	r2, [pc, #372]	; (8001e28 <HAL_RCC_OscConfig+0x4c4>)
 8001cb2:	f043 0301 	orr.w	r3, r3, #1
 8001cb6:	6213      	str	r3, [r2, #32]
 8001cb8:	e00b      	b.n	8001cd2 <HAL_RCC_OscConfig+0x36e>
 8001cba:	4b5b      	ldr	r3, [pc, #364]	; (8001e28 <HAL_RCC_OscConfig+0x4c4>)
 8001cbc:	6a1b      	ldr	r3, [r3, #32]
 8001cbe:	4a5a      	ldr	r2, [pc, #360]	; (8001e28 <HAL_RCC_OscConfig+0x4c4>)
 8001cc0:	f023 0301 	bic.w	r3, r3, #1
 8001cc4:	6213      	str	r3, [r2, #32]
 8001cc6:	4b58      	ldr	r3, [pc, #352]	; (8001e28 <HAL_RCC_OscConfig+0x4c4>)
 8001cc8:	6a1b      	ldr	r3, [r3, #32]
 8001cca:	4a57      	ldr	r2, [pc, #348]	; (8001e28 <HAL_RCC_OscConfig+0x4c4>)
 8001ccc:	f023 0304 	bic.w	r3, r3, #4
 8001cd0:	6213      	str	r3, [r2, #32]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	68db      	ldr	r3, [r3, #12]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d015      	beq.n	8001d06 <HAL_RCC_OscConfig+0x3a2>
 8001cda:	f7ff fb67 	bl	80013ac <HAL_GetTick>
 8001cde:	6138      	str	r0, [r7, #16]
 8001ce0:	e00a      	b.n	8001cf8 <HAL_RCC_OscConfig+0x394>
 8001ce2:	f7ff fb63 	bl	80013ac <HAL_GetTick>
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	1ad3      	subs	r3, r2, r3
 8001cec:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d901      	bls.n	8001cf8 <HAL_RCC_OscConfig+0x394>
 8001cf4:	2303      	movs	r3, #3
 8001cf6:	e0b1      	b.n	8001e5c <HAL_RCC_OscConfig+0x4f8>
 8001cf8:	4b4b      	ldr	r3, [pc, #300]	; (8001e28 <HAL_RCC_OscConfig+0x4c4>)
 8001cfa:	6a1b      	ldr	r3, [r3, #32]
 8001cfc:	f003 0302 	and.w	r3, r3, #2
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d0ee      	beq.n	8001ce2 <HAL_RCC_OscConfig+0x37e>
 8001d04:	e014      	b.n	8001d30 <HAL_RCC_OscConfig+0x3cc>
 8001d06:	f7ff fb51 	bl	80013ac <HAL_GetTick>
 8001d0a:	6138      	str	r0, [r7, #16]
 8001d0c:	e00a      	b.n	8001d24 <HAL_RCC_OscConfig+0x3c0>
 8001d0e:	f7ff fb4d 	bl	80013ac <HAL_GetTick>
 8001d12:	4602      	mov	r2, r0
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	1ad3      	subs	r3, r2, r3
 8001d18:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d901      	bls.n	8001d24 <HAL_RCC_OscConfig+0x3c0>
 8001d20:	2303      	movs	r3, #3
 8001d22:	e09b      	b.n	8001e5c <HAL_RCC_OscConfig+0x4f8>
 8001d24:	4b40      	ldr	r3, [pc, #256]	; (8001e28 <HAL_RCC_OscConfig+0x4c4>)
 8001d26:	6a1b      	ldr	r3, [r3, #32]
 8001d28:	f003 0302 	and.w	r3, r3, #2
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d1ee      	bne.n	8001d0e <HAL_RCC_OscConfig+0x3aa>
 8001d30:	7dfb      	ldrb	r3, [r7, #23]
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	d105      	bne.n	8001d42 <HAL_RCC_OscConfig+0x3de>
 8001d36:	4b3c      	ldr	r3, [pc, #240]	; (8001e28 <HAL_RCC_OscConfig+0x4c4>)
 8001d38:	69db      	ldr	r3, [r3, #28]
 8001d3a:	4a3b      	ldr	r2, [pc, #236]	; (8001e28 <HAL_RCC_OscConfig+0x4c4>)
 8001d3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d40:	61d3      	str	r3, [r2, #28]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	69db      	ldr	r3, [r3, #28]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	f000 8087 	beq.w	8001e5a <HAL_RCC_OscConfig+0x4f6>
 8001d4c:	4b36      	ldr	r3, [pc, #216]	; (8001e28 <HAL_RCC_OscConfig+0x4c4>)
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	f003 030c 	and.w	r3, r3, #12
 8001d54:	2b08      	cmp	r3, #8
 8001d56:	d061      	beq.n	8001e1c <HAL_RCC_OscConfig+0x4b8>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	69db      	ldr	r3, [r3, #28]
 8001d5c:	2b02      	cmp	r3, #2
 8001d5e:	d146      	bne.n	8001dee <HAL_RCC_OscConfig+0x48a>
 8001d60:	4b33      	ldr	r3, [pc, #204]	; (8001e30 <HAL_RCC_OscConfig+0x4cc>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	601a      	str	r2, [r3, #0]
 8001d66:	f7ff fb21 	bl	80013ac <HAL_GetTick>
 8001d6a:	6138      	str	r0, [r7, #16]
 8001d6c:	e008      	b.n	8001d80 <HAL_RCC_OscConfig+0x41c>
 8001d6e:	f7ff fb1d 	bl	80013ac <HAL_GetTick>
 8001d72:	4602      	mov	r2, r0
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	1ad3      	subs	r3, r2, r3
 8001d78:	2b02      	cmp	r3, #2
 8001d7a:	d901      	bls.n	8001d80 <HAL_RCC_OscConfig+0x41c>
 8001d7c:	2303      	movs	r3, #3
 8001d7e:	e06d      	b.n	8001e5c <HAL_RCC_OscConfig+0x4f8>
 8001d80:	4b29      	ldr	r3, [pc, #164]	; (8001e28 <HAL_RCC_OscConfig+0x4c4>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d1f0      	bne.n	8001d6e <HAL_RCC_OscConfig+0x40a>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6a1b      	ldr	r3, [r3, #32]
 8001d90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d94:	d108      	bne.n	8001da8 <HAL_RCC_OscConfig+0x444>
 8001d96:	4b24      	ldr	r3, [pc, #144]	; (8001e28 <HAL_RCC_OscConfig+0x4c4>)
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	4921      	ldr	r1, [pc, #132]	; (8001e28 <HAL_RCC_OscConfig+0x4c4>)
 8001da4:	4313      	orrs	r3, r2
 8001da6:	604b      	str	r3, [r1, #4]
 8001da8:	4b1f      	ldr	r3, [pc, #124]	; (8001e28 <HAL_RCC_OscConfig+0x4c4>)
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6a19      	ldr	r1, [r3, #32]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db8:	430b      	orrs	r3, r1
 8001dba:	491b      	ldr	r1, [pc, #108]	; (8001e28 <HAL_RCC_OscConfig+0x4c4>)
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	604b      	str	r3, [r1, #4]
 8001dc0:	4b1b      	ldr	r3, [pc, #108]	; (8001e30 <HAL_RCC_OscConfig+0x4cc>)
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	601a      	str	r2, [r3, #0]
 8001dc6:	f7ff faf1 	bl	80013ac <HAL_GetTick>
 8001dca:	6138      	str	r0, [r7, #16]
 8001dcc:	e008      	b.n	8001de0 <HAL_RCC_OscConfig+0x47c>
 8001dce:	f7ff faed 	bl	80013ac <HAL_GetTick>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	1ad3      	subs	r3, r2, r3
 8001dd8:	2b02      	cmp	r3, #2
 8001dda:	d901      	bls.n	8001de0 <HAL_RCC_OscConfig+0x47c>
 8001ddc:	2303      	movs	r3, #3
 8001dde:	e03d      	b.n	8001e5c <HAL_RCC_OscConfig+0x4f8>
 8001de0:	4b11      	ldr	r3, [pc, #68]	; (8001e28 <HAL_RCC_OscConfig+0x4c4>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d0f0      	beq.n	8001dce <HAL_RCC_OscConfig+0x46a>
 8001dec:	e035      	b.n	8001e5a <HAL_RCC_OscConfig+0x4f6>
 8001dee:	4b10      	ldr	r3, [pc, #64]	; (8001e30 <HAL_RCC_OscConfig+0x4cc>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	601a      	str	r2, [r3, #0]
 8001df4:	f7ff fada 	bl	80013ac <HAL_GetTick>
 8001df8:	6138      	str	r0, [r7, #16]
 8001dfa:	e008      	b.n	8001e0e <HAL_RCC_OscConfig+0x4aa>
 8001dfc:	f7ff fad6 	bl	80013ac <HAL_GetTick>
 8001e00:	4602      	mov	r2, r0
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	2b02      	cmp	r3, #2
 8001e08:	d901      	bls.n	8001e0e <HAL_RCC_OscConfig+0x4aa>
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	e026      	b.n	8001e5c <HAL_RCC_OscConfig+0x4f8>
 8001e0e:	4b06      	ldr	r3, [pc, #24]	; (8001e28 <HAL_RCC_OscConfig+0x4c4>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d1f0      	bne.n	8001dfc <HAL_RCC_OscConfig+0x498>
 8001e1a:	e01e      	b.n	8001e5a <HAL_RCC_OscConfig+0x4f6>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	69db      	ldr	r3, [r3, #28]
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	d107      	bne.n	8001e34 <HAL_RCC_OscConfig+0x4d0>
 8001e24:	2301      	movs	r3, #1
 8001e26:	e019      	b.n	8001e5c <HAL_RCC_OscConfig+0x4f8>
 8001e28:	40021000 	.word	0x40021000
 8001e2c:	40007000 	.word	0x40007000
 8001e30:	42420060 	.word	0x42420060
 8001e34:	4b0b      	ldr	r3, [pc, #44]	; (8001e64 <HAL_RCC_OscConfig+0x500>)
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	60fb      	str	r3, [r7, #12]
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6a1b      	ldr	r3, [r3, #32]
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d106      	bne.n	8001e56 <HAL_RCC_OscConfig+0x4f2>
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e52:	429a      	cmp	r2, r3
 8001e54:	d001      	beq.n	8001e5a <HAL_RCC_OscConfig+0x4f6>
 8001e56:	2301      	movs	r3, #1
 8001e58:	e000      	b.n	8001e5c <HAL_RCC_OscConfig+0x4f8>
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	3718      	adds	r7, #24
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	40021000 	.word	0x40021000

08001e68 <HAL_RCC_ClockConfig>:
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b084      	sub	sp, #16
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	6039      	str	r1, [r7, #0]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d101      	bne.n	8001e7c <HAL_RCC_ClockConfig+0x14>
 8001e78:	2301      	movs	r3, #1
 8001e7a:	e0d0      	b.n	800201e <HAL_RCC_ClockConfig+0x1b6>
 8001e7c:	4b6a      	ldr	r3, [pc, #424]	; (8002028 <HAL_RCC_ClockConfig+0x1c0>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f003 0307 	and.w	r3, r3, #7
 8001e84:	683a      	ldr	r2, [r7, #0]
 8001e86:	429a      	cmp	r2, r3
 8001e88:	d910      	bls.n	8001eac <HAL_RCC_ClockConfig+0x44>
 8001e8a:	4b67      	ldr	r3, [pc, #412]	; (8002028 <HAL_RCC_ClockConfig+0x1c0>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f023 0207 	bic.w	r2, r3, #7
 8001e92:	4965      	ldr	r1, [pc, #404]	; (8002028 <HAL_RCC_ClockConfig+0x1c0>)
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	4313      	orrs	r3, r2
 8001e98:	600b      	str	r3, [r1, #0]
 8001e9a:	4b63      	ldr	r3, [pc, #396]	; (8002028 <HAL_RCC_ClockConfig+0x1c0>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 0307 	and.w	r3, r3, #7
 8001ea2:	683a      	ldr	r2, [r7, #0]
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d001      	beq.n	8001eac <HAL_RCC_ClockConfig+0x44>
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	e0b8      	b.n	800201e <HAL_RCC_ClockConfig+0x1b6>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f003 0302 	and.w	r3, r3, #2
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d020      	beq.n	8001efa <HAL_RCC_ClockConfig+0x92>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 0304 	and.w	r3, r3, #4
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d005      	beq.n	8001ed0 <HAL_RCC_ClockConfig+0x68>
 8001ec4:	4b59      	ldr	r3, [pc, #356]	; (800202c <HAL_RCC_ClockConfig+0x1c4>)
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	4a58      	ldr	r2, [pc, #352]	; (800202c <HAL_RCC_ClockConfig+0x1c4>)
 8001eca:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001ece:	6053      	str	r3, [r2, #4]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f003 0308 	and.w	r3, r3, #8
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d005      	beq.n	8001ee8 <HAL_RCC_ClockConfig+0x80>
 8001edc:	4b53      	ldr	r3, [pc, #332]	; (800202c <HAL_RCC_ClockConfig+0x1c4>)
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	4a52      	ldr	r2, [pc, #328]	; (800202c <HAL_RCC_ClockConfig+0x1c4>)
 8001ee2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001ee6:	6053      	str	r3, [r2, #4]
 8001ee8:	4b50      	ldr	r3, [pc, #320]	; (800202c <HAL_RCC_ClockConfig+0x1c4>)
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	494d      	ldr	r1, [pc, #308]	; (800202c <HAL_RCC_ClockConfig+0x1c4>)
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	604b      	str	r3, [r1, #4]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f003 0301 	and.w	r3, r3, #1
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d040      	beq.n	8001f88 <HAL_RCC_ClockConfig+0x120>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	2b01      	cmp	r3, #1
 8001f0c:	d107      	bne.n	8001f1e <HAL_RCC_ClockConfig+0xb6>
 8001f0e:	4b47      	ldr	r3, [pc, #284]	; (800202c <HAL_RCC_ClockConfig+0x1c4>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d115      	bne.n	8001f46 <HAL_RCC_ClockConfig+0xde>
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e07f      	b.n	800201e <HAL_RCC_ClockConfig+0x1b6>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	2b02      	cmp	r3, #2
 8001f24:	d107      	bne.n	8001f36 <HAL_RCC_ClockConfig+0xce>
 8001f26:	4b41      	ldr	r3, [pc, #260]	; (800202c <HAL_RCC_ClockConfig+0x1c4>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d109      	bne.n	8001f46 <HAL_RCC_ClockConfig+0xde>
 8001f32:	2301      	movs	r3, #1
 8001f34:	e073      	b.n	800201e <HAL_RCC_ClockConfig+0x1b6>
 8001f36:	4b3d      	ldr	r3, [pc, #244]	; (800202c <HAL_RCC_ClockConfig+0x1c4>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 0302 	and.w	r3, r3, #2
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d101      	bne.n	8001f46 <HAL_RCC_ClockConfig+0xde>
 8001f42:	2301      	movs	r3, #1
 8001f44:	e06b      	b.n	800201e <HAL_RCC_ClockConfig+0x1b6>
 8001f46:	4b39      	ldr	r3, [pc, #228]	; (800202c <HAL_RCC_ClockConfig+0x1c4>)
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	f023 0203 	bic.w	r2, r3, #3
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	4936      	ldr	r1, [pc, #216]	; (800202c <HAL_RCC_ClockConfig+0x1c4>)
 8001f54:	4313      	orrs	r3, r2
 8001f56:	604b      	str	r3, [r1, #4]
 8001f58:	f7ff fa28 	bl	80013ac <HAL_GetTick>
 8001f5c:	60f8      	str	r0, [r7, #12]
 8001f5e:	e00a      	b.n	8001f76 <HAL_RCC_ClockConfig+0x10e>
 8001f60:	f7ff fa24 	bl	80013ac <HAL_GetTick>
 8001f64:	4602      	mov	r2, r0
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	1ad3      	subs	r3, r2, r3
 8001f6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d901      	bls.n	8001f76 <HAL_RCC_ClockConfig+0x10e>
 8001f72:	2303      	movs	r3, #3
 8001f74:	e053      	b.n	800201e <HAL_RCC_ClockConfig+0x1b6>
 8001f76:	4b2d      	ldr	r3, [pc, #180]	; (800202c <HAL_RCC_ClockConfig+0x1c4>)
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	f003 020c 	and.w	r2, r3, #12
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d1eb      	bne.n	8001f60 <HAL_RCC_ClockConfig+0xf8>
 8001f88:	4b27      	ldr	r3, [pc, #156]	; (8002028 <HAL_RCC_ClockConfig+0x1c0>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 0307 	and.w	r3, r3, #7
 8001f90:	683a      	ldr	r2, [r7, #0]
 8001f92:	429a      	cmp	r2, r3
 8001f94:	d210      	bcs.n	8001fb8 <HAL_RCC_ClockConfig+0x150>
 8001f96:	4b24      	ldr	r3, [pc, #144]	; (8002028 <HAL_RCC_ClockConfig+0x1c0>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f023 0207 	bic.w	r2, r3, #7
 8001f9e:	4922      	ldr	r1, [pc, #136]	; (8002028 <HAL_RCC_ClockConfig+0x1c0>)
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	600b      	str	r3, [r1, #0]
 8001fa6:	4b20      	ldr	r3, [pc, #128]	; (8002028 <HAL_RCC_ClockConfig+0x1c0>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 0307 	and.w	r3, r3, #7
 8001fae:	683a      	ldr	r2, [r7, #0]
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d001      	beq.n	8001fb8 <HAL_RCC_ClockConfig+0x150>
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	e032      	b.n	800201e <HAL_RCC_ClockConfig+0x1b6>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 0304 	and.w	r3, r3, #4
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d008      	beq.n	8001fd6 <HAL_RCC_ClockConfig+0x16e>
 8001fc4:	4b19      	ldr	r3, [pc, #100]	; (800202c <HAL_RCC_ClockConfig+0x1c4>)
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	4916      	ldr	r1, [pc, #88]	; (800202c <HAL_RCC_ClockConfig+0x1c4>)
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	604b      	str	r3, [r1, #4]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 0308 	and.w	r3, r3, #8
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d009      	beq.n	8001ff6 <HAL_RCC_ClockConfig+0x18e>
 8001fe2:	4b12      	ldr	r3, [pc, #72]	; (800202c <HAL_RCC_ClockConfig+0x1c4>)
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	691b      	ldr	r3, [r3, #16]
 8001fee:	00db      	lsls	r3, r3, #3
 8001ff0:	490e      	ldr	r1, [pc, #56]	; (800202c <HAL_RCC_ClockConfig+0x1c4>)
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	604b      	str	r3, [r1, #4]
 8001ff6:	f000 f821 	bl	800203c <HAL_RCC_GetSysClockFreq>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	4b0b      	ldr	r3, [pc, #44]	; (800202c <HAL_RCC_ClockConfig+0x1c4>)
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	091b      	lsrs	r3, r3, #4
 8002002:	f003 030f 	and.w	r3, r3, #15
 8002006:	490a      	ldr	r1, [pc, #40]	; (8002030 <HAL_RCC_ClockConfig+0x1c8>)
 8002008:	5ccb      	ldrb	r3, [r1, r3]
 800200a:	fa22 f303 	lsr.w	r3, r2, r3
 800200e:	4a09      	ldr	r2, [pc, #36]	; (8002034 <HAL_RCC_ClockConfig+0x1cc>)
 8002010:	6013      	str	r3, [r2, #0]
 8002012:	4b09      	ldr	r3, [pc, #36]	; (8002038 <HAL_RCC_ClockConfig+0x1d0>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4618      	mov	r0, r3
 8002018:	f7ff f986 	bl	8001328 <HAL_InitTick>
 800201c:	2300      	movs	r3, #0
 800201e:	4618      	mov	r0, r3
 8002020:	3710      	adds	r7, #16
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	40022000 	.word	0x40022000
 800202c:	40021000 	.word	0x40021000
 8002030:	0800298c 	.word	0x0800298c
 8002034:	20000068 	.word	0x20000068
 8002038:	2000009c 	.word	0x2000009c

0800203c <HAL_RCC_GetSysClockFreq>:
 800203c:	b490      	push	{r4, r7}
 800203e:	b08a      	sub	sp, #40	; 0x28
 8002040:	af00      	add	r7, sp, #0
 8002042:	4b29      	ldr	r3, [pc, #164]	; (80020e8 <HAL_RCC_GetSysClockFreq+0xac>)
 8002044:	1d3c      	adds	r4, r7, #4
 8002046:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002048:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800204c:	f240 2301 	movw	r3, #513	; 0x201
 8002050:	803b      	strh	r3, [r7, #0]
 8002052:	2300      	movs	r3, #0
 8002054:	61fb      	str	r3, [r7, #28]
 8002056:	2300      	movs	r3, #0
 8002058:	61bb      	str	r3, [r7, #24]
 800205a:	2300      	movs	r3, #0
 800205c:	627b      	str	r3, [r7, #36]	; 0x24
 800205e:	2300      	movs	r3, #0
 8002060:	617b      	str	r3, [r7, #20]
 8002062:	2300      	movs	r3, #0
 8002064:	623b      	str	r3, [r7, #32]
 8002066:	4b21      	ldr	r3, [pc, #132]	; (80020ec <HAL_RCC_GetSysClockFreq+0xb0>)
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	61fb      	str	r3, [r7, #28]
 800206c:	69fb      	ldr	r3, [r7, #28]
 800206e:	f003 030c 	and.w	r3, r3, #12
 8002072:	2b04      	cmp	r3, #4
 8002074:	d002      	beq.n	800207c <HAL_RCC_GetSysClockFreq+0x40>
 8002076:	2b08      	cmp	r3, #8
 8002078:	d003      	beq.n	8002082 <HAL_RCC_GetSysClockFreq+0x46>
 800207a:	e02b      	b.n	80020d4 <HAL_RCC_GetSysClockFreq+0x98>
 800207c:	4b1c      	ldr	r3, [pc, #112]	; (80020f0 <HAL_RCC_GetSysClockFreq+0xb4>)
 800207e:	623b      	str	r3, [r7, #32]
 8002080:	e02b      	b.n	80020da <HAL_RCC_GetSysClockFreq+0x9e>
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	0c9b      	lsrs	r3, r3, #18
 8002086:	f003 030f 	and.w	r3, r3, #15
 800208a:	3328      	adds	r3, #40	; 0x28
 800208c:	443b      	add	r3, r7
 800208e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002092:	617b      	str	r3, [r7, #20]
 8002094:	69fb      	ldr	r3, [r7, #28]
 8002096:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800209a:	2b00      	cmp	r3, #0
 800209c:	d012      	beq.n	80020c4 <HAL_RCC_GetSysClockFreq+0x88>
 800209e:	4b13      	ldr	r3, [pc, #76]	; (80020ec <HAL_RCC_GetSysClockFreq+0xb0>)
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	0c5b      	lsrs	r3, r3, #17
 80020a4:	f003 0301 	and.w	r3, r3, #1
 80020a8:	3328      	adds	r3, #40	; 0x28
 80020aa:	443b      	add	r3, r7
 80020ac:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80020b0:	61bb      	str	r3, [r7, #24]
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	4a0e      	ldr	r2, [pc, #56]	; (80020f0 <HAL_RCC_GetSysClockFreq+0xb4>)
 80020b6:	fb03 f202 	mul.w	r2, r3, r2
 80020ba:	69bb      	ldr	r3, [r7, #24]
 80020bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80020c0:	627b      	str	r3, [r7, #36]	; 0x24
 80020c2:	e004      	b.n	80020ce <HAL_RCC_GetSysClockFreq+0x92>
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	4a0b      	ldr	r2, [pc, #44]	; (80020f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80020c8:	fb02 f303 	mul.w	r3, r2, r3
 80020cc:	627b      	str	r3, [r7, #36]	; 0x24
 80020ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d0:	623b      	str	r3, [r7, #32]
 80020d2:	e002      	b.n	80020da <HAL_RCC_GetSysClockFreq+0x9e>
 80020d4:	4b06      	ldr	r3, [pc, #24]	; (80020f0 <HAL_RCC_GetSysClockFreq+0xb4>)
 80020d6:	623b      	str	r3, [r7, #32]
 80020d8:	bf00      	nop
 80020da:	6a3b      	ldr	r3, [r7, #32]
 80020dc:	4618      	mov	r0, r3
 80020de:	3728      	adds	r7, #40	; 0x28
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bc90      	pop	{r4, r7}
 80020e4:	4770      	bx	lr
 80020e6:	bf00      	nop
 80020e8:	0800296c 	.word	0x0800296c
 80020ec:	40021000 	.word	0x40021000
 80020f0:	007a1200 	.word	0x007a1200
 80020f4:	003d0900 	.word	0x003d0900

080020f8 <RCC_Delay>:
 80020f8:	b480      	push	{r7}
 80020fa:	b085      	sub	sp, #20
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
 8002100:	4b0a      	ldr	r3, [pc, #40]	; (800212c <RCC_Delay+0x34>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a0a      	ldr	r2, [pc, #40]	; (8002130 <RCC_Delay+0x38>)
 8002106:	fba2 2303 	umull	r2, r3, r2, r3
 800210a:	0a5b      	lsrs	r3, r3, #9
 800210c:	687a      	ldr	r2, [r7, #4]
 800210e:	fb02 f303 	mul.w	r3, r2, r3
 8002112:	60fb      	str	r3, [r7, #12]
 8002114:	bf00      	nop
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	1e5a      	subs	r2, r3, #1
 800211a:	60fa      	str	r2, [r7, #12]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d1f9      	bne.n	8002114 <RCC_Delay+0x1c>
 8002120:	bf00      	nop
 8002122:	bf00      	nop
 8002124:	3714      	adds	r7, #20
 8002126:	46bd      	mov	sp, r7
 8002128:	bc80      	pop	{r7}
 800212a:	4770      	bx	lr
 800212c:	20000068 	.word	0x20000068
 8002130:	10624dd3 	.word	0x10624dd3

08002134 <HAL_TIM_Base_Init>:
 8002134:	b580      	push	{r7, lr}
 8002136:	b082      	sub	sp, #8
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d101      	bne.n	8002146 <HAL_TIM_Base_Init+0x12>
 8002142:	2301      	movs	r3, #1
 8002144:	e041      	b.n	80021ca <HAL_TIM_Base_Init+0x96>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800214c:	b2db      	uxtb	r3, r3
 800214e:	2b00      	cmp	r3, #0
 8002150:	d106      	bne.n	8002160 <HAL_TIM_Base_Init+0x2c>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2200      	movs	r2, #0
 8002156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f7fe fe60 	bl	8000e20 <HAL_TIM_Base_MspInit>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2202      	movs	r2, #2
 8002164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	3304      	adds	r3, #4
 8002170:	4619      	mov	r1, r3
 8002172:	4610      	mov	r0, r2
 8002174:	f000 fa6a 	bl	800264c <TIM_Base_SetConfig>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2201      	movs	r2, #1
 800217c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2201      	movs	r2, #1
 8002184:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2201      	movs	r2, #1
 800218c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2201      	movs	r2, #1
 8002194:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2201      	movs	r2, #1
 800219c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2201      	movs	r2, #1
 80021a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2201      	movs	r2, #1
 80021ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2201      	movs	r2, #1
 80021b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2201      	movs	r2, #1
 80021bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2201      	movs	r2, #1
 80021c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80021c8:	2300      	movs	r3, #0
 80021ca:	4618      	mov	r0, r3
 80021cc:	3708      	adds	r7, #8
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
	...

080021d4 <HAL_TIM_Base_Start_IT>:
 80021d4:	b480      	push	{r7}
 80021d6:	b085      	sub	sp, #20
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021e2:	b2db      	uxtb	r3, r3
 80021e4:	2b01      	cmp	r3, #1
 80021e6:	d001      	beq.n	80021ec <HAL_TIM_Base_Start_IT+0x18>
 80021e8:	2301      	movs	r3, #1
 80021ea:	e035      	b.n	8002258 <HAL_TIM_Base_Start_IT+0x84>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2202      	movs	r2, #2
 80021f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	68da      	ldr	r2, [r3, #12]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f042 0201 	orr.w	r2, r2, #1
 8002202:	60da      	str	r2, [r3, #12]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a16      	ldr	r2, [pc, #88]	; (8002264 <HAL_TIM_Base_Start_IT+0x90>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d009      	beq.n	8002222 <HAL_TIM_Base_Start_IT+0x4e>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002216:	d004      	beq.n	8002222 <HAL_TIM_Base_Start_IT+0x4e>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a12      	ldr	r2, [pc, #72]	; (8002268 <HAL_TIM_Base_Start_IT+0x94>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d111      	bne.n	8002246 <HAL_TIM_Base_Start_IT+0x72>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	f003 0307 	and.w	r3, r3, #7
 800222c:	60fb      	str	r3, [r7, #12]
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	2b06      	cmp	r3, #6
 8002232:	d010      	beq.n	8002256 <HAL_TIM_Base_Start_IT+0x82>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f042 0201 	orr.w	r2, r2, #1
 8002242:	601a      	str	r2, [r3, #0]
 8002244:	e007      	b.n	8002256 <HAL_TIM_Base_Start_IT+0x82>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f042 0201 	orr.w	r2, r2, #1
 8002254:	601a      	str	r2, [r3, #0]
 8002256:	2300      	movs	r3, #0
 8002258:	4618      	mov	r0, r3
 800225a:	3714      	adds	r7, #20
 800225c:	46bd      	mov	sp, r7
 800225e:	bc80      	pop	{r7}
 8002260:	4770      	bx	lr
 8002262:	bf00      	nop
 8002264:	40012c00 	.word	0x40012c00
 8002268:	40000400 	.word	0x40000400

0800226c <HAL_TIM_IRQHandler>:
 800226c:	b580      	push	{r7, lr}
 800226e:	b082      	sub	sp, #8
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	691b      	ldr	r3, [r3, #16]
 800227a:	f003 0302 	and.w	r3, r3, #2
 800227e:	2b02      	cmp	r3, #2
 8002280:	d122      	bne.n	80022c8 <HAL_TIM_IRQHandler+0x5c>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	f003 0302 	and.w	r3, r3, #2
 800228c:	2b02      	cmp	r3, #2
 800228e:	d11b      	bne.n	80022c8 <HAL_TIM_IRQHandler+0x5c>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f06f 0202 	mvn.w	r2, #2
 8002298:	611a      	str	r2, [r3, #16]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2201      	movs	r2, #1
 800229e:	771a      	strb	r2, [r3, #28]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	699b      	ldr	r3, [r3, #24]
 80022a6:	f003 0303 	and.w	r3, r3, #3
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d003      	beq.n	80022b6 <HAL_TIM_IRQHandler+0x4a>
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	f000 f9b1 	bl	8002616 <HAL_TIM_IC_CaptureCallback>
 80022b4:	e005      	b.n	80022c2 <HAL_TIM_IRQHandler+0x56>
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f000 f9a4 	bl	8002604 <HAL_TIM_OC_DelayElapsedCallback>
 80022bc:	6878      	ldr	r0, [r7, #4]
 80022be:	f000 f9b3 	bl	8002628 <HAL_TIM_PWM_PulseFinishedCallback>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2200      	movs	r2, #0
 80022c6:	771a      	strb	r2, [r3, #28]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	691b      	ldr	r3, [r3, #16]
 80022ce:	f003 0304 	and.w	r3, r3, #4
 80022d2:	2b04      	cmp	r3, #4
 80022d4:	d122      	bne.n	800231c <HAL_TIM_IRQHandler+0xb0>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	f003 0304 	and.w	r3, r3, #4
 80022e0:	2b04      	cmp	r3, #4
 80022e2:	d11b      	bne.n	800231c <HAL_TIM_IRQHandler+0xb0>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f06f 0204 	mvn.w	r2, #4
 80022ec:	611a      	str	r2, [r3, #16]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2202      	movs	r2, #2
 80022f2:	771a      	strb	r2, [r3, #28]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	699b      	ldr	r3, [r3, #24]
 80022fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d003      	beq.n	800230a <HAL_TIM_IRQHandler+0x9e>
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	f000 f987 	bl	8002616 <HAL_TIM_IC_CaptureCallback>
 8002308:	e005      	b.n	8002316 <HAL_TIM_IRQHandler+0xaa>
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f000 f97a 	bl	8002604 <HAL_TIM_OC_DelayElapsedCallback>
 8002310:	6878      	ldr	r0, [r7, #4]
 8002312:	f000 f989 	bl	8002628 <HAL_TIM_PWM_PulseFinishedCallback>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2200      	movs	r2, #0
 800231a:	771a      	strb	r2, [r3, #28]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	691b      	ldr	r3, [r3, #16]
 8002322:	f003 0308 	and.w	r3, r3, #8
 8002326:	2b08      	cmp	r3, #8
 8002328:	d122      	bne.n	8002370 <HAL_TIM_IRQHandler+0x104>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	68db      	ldr	r3, [r3, #12]
 8002330:	f003 0308 	and.w	r3, r3, #8
 8002334:	2b08      	cmp	r3, #8
 8002336:	d11b      	bne.n	8002370 <HAL_TIM_IRQHandler+0x104>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f06f 0208 	mvn.w	r2, #8
 8002340:	611a      	str	r2, [r3, #16]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2204      	movs	r2, #4
 8002346:	771a      	strb	r2, [r3, #28]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	69db      	ldr	r3, [r3, #28]
 800234e:	f003 0303 	and.w	r3, r3, #3
 8002352:	2b00      	cmp	r3, #0
 8002354:	d003      	beq.n	800235e <HAL_TIM_IRQHandler+0xf2>
 8002356:	6878      	ldr	r0, [r7, #4]
 8002358:	f000 f95d 	bl	8002616 <HAL_TIM_IC_CaptureCallback>
 800235c:	e005      	b.n	800236a <HAL_TIM_IRQHandler+0xfe>
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f000 f950 	bl	8002604 <HAL_TIM_OC_DelayElapsedCallback>
 8002364:	6878      	ldr	r0, [r7, #4]
 8002366:	f000 f95f 	bl	8002628 <HAL_TIM_PWM_PulseFinishedCallback>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2200      	movs	r2, #0
 800236e:	771a      	strb	r2, [r3, #28]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	691b      	ldr	r3, [r3, #16]
 8002376:	f003 0310 	and.w	r3, r3, #16
 800237a:	2b10      	cmp	r3, #16
 800237c:	d122      	bne.n	80023c4 <HAL_TIM_IRQHandler+0x158>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	f003 0310 	and.w	r3, r3, #16
 8002388:	2b10      	cmp	r3, #16
 800238a:	d11b      	bne.n	80023c4 <HAL_TIM_IRQHandler+0x158>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f06f 0210 	mvn.w	r2, #16
 8002394:	611a      	str	r2, [r3, #16]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2208      	movs	r2, #8
 800239a:	771a      	strb	r2, [r3, #28]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	69db      	ldr	r3, [r3, #28]
 80023a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d003      	beq.n	80023b2 <HAL_TIM_IRQHandler+0x146>
 80023aa:	6878      	ldr	r0, [r7, #4]
 80023ac:	f000 f933 	bl	8002616 <HAL_TIM_IC_CaptureCallback>
 80023b0:	e005      	b.n	80023be <HAL_TIM_IRQHandler+0x152>
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	f000 f926 	bl	8002604 <HAL_TIM_OC_DelayElapsedCallback>
 80023b8:	6878      	ldr	r0, [r7, #4]
 80023ba:	f000 f935 	bl	8002628 <HAL_TIM_PWM_PulseFinishedCallback>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2200      	movs	r2, #0
 80023c2:	771a      	strb	r2, [r3, #28]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	691b      	ldr	r3, [r3, #16]
 80023ca:	f003 0301 	and.w	r3, r3, #1
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d10e      	bne.n	80023f0 <HAL_TIM_IRQHandler+0x184>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	f003 0301 	and.w	r3, r3, #1
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d107      	bne.n	80023f0 <HAL_TIM_IRQHandler+0x184>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f06f 0201 	mvn.w	r2, #1
 80023e8:	611a      	str	r2, [r3, #16]
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	f7fe fa61 	bl	80008b2 <HAL_TIM_PeriodElapsedCallback>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	691b      	ldr	r3, [r3, #16]
 80023f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023fa:	2b80      	cmp	r3, #128	; 0x80
 80023fc:	d10e      	bne.n	800241c <HAL_TIM_IRQHandler+0x1b0>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002408:	2b80      	cmp	r3, #128	; 0x80
 800240a:	d107      	bne.n	800241c <HAL_TIM_IRQHandler+0x1b0>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002414:	611a      	str	r2, [r3, #16]
 8002416:	6878      	ldr	r0, [r7, #4]
 8002418:	f000 fa67 	bl	80028ea <HAL_TIMEx_BreakCallback>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	691b      	ldr	r3, [r3, #16]
 8002422:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002426:	2b40      	cmp	r3, #64	; 0x40
 8002428:	d10e      	bne.n	8002448 <HAL_TIM_IRQHandler+0x1dc>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002434:	2b40      	cmp	r3, #64	; 0x40
 8002436:	d107      	bne.n	8002448 <HAL_TIM_IRQHandler+0x1dc>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002440:	611a      	str	r2, [r3, #16]
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	f000 f8f9 	bl	800263a <HAL_TIM_TriggerCallback>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	691b      	ldr	r3, [r3, #16]
 800244e:	f003 0320 	and.w	r3, r3, #32
 8002452:	2b20      	cmp	r3, #32
 8002454:	d10e      	bne.n	8002474 <HAL_TIM_IRQHandler+0x208>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	f003 0320 	and.w	r3, r3, #32
 8002460:	2b20      	cmp	r3, #32
 8002462:	d107      	bne.n	8002474 <HAL_TIM_IRQHandler+0x208>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f06f 0220 	mvn.w	r2, #32
 800246c:	611a      	str	r2, [r3, #16]
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	f000 fa32 	bl	80028d8 <HAL_TIMEx_CommutCallback>
 8002474:	bf00      	nop
 8002476:	3708      	adds	r7, #8
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}

0800247c <HAL_TIM_ConfigClockSource>:
 800247c:	b580      	push	{r7, lr}
 800247e:	b084      	sub	sp, #16
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
 8002484:	6039      	str	r1, [r7, #0]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800248c:	2b01      	cmp	r3, #1
 800248e:	d101      	bne.n	8002494 <HAL_TIM_ConfigClockSource+0x18>
 8002490:	2302      	movs	r3, #2
 8002492:	e0b3      	b.n	80025fc <HAL_TIM_ConfigClockSource+0x180>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2201      	movs	r2, #1
 8002498:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2202      	movs	r2, #2
 80024a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	60fb      	str	r3, [r7, #12]
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80024b2:	60fb      	str	r3, [r7, #12]
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80024ba:	60fb      	str	r3, [r7, #12]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	68fa      	ldr	r2, [r7, #12]
 80024c2:	609a      	str	r2, [r3, #8]
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024cc:	d03e      	beq.n	800254c <HAL_TIM_ConfigClockSource+0xd0>
 80024ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024d2:	f200 8087 	bhi.w	80025e4 <HAL_TIM_ConfigClockSource+0x168>
 80024d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024da:	f000 8085 	beq.w	80025e8 <HAL_TIM_ConfigClockSource+0x16c>
 80024de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024e2:	d87f      	bhi.n	80025e4 <HAL_TIM_ConfigClockSource+0x168>
 80024e4:	2b70      	cmp	r3, #112	; 0x70
 80024e6:	d01a      	beq.n	800251e <HAL_TIM_ConfigClockSource+0xa2>
 80024e8:	2b70      	cmp	r3, #112	; 0x70
 80024ea:	d87b      	bhi.n	80025e4 <HAL_TIM_ConfigClockSource+0x168>
 80024ec:	2b60      	cmp	r3, #96	; 0x60
 80024ee:	d050      	beq.n	8002592 <HAL_TIM_ConfigClockSource+0x116>
 80024f0:	2b60      	cmp	r3, #96	; 0x60
 80024f2:	d877      	bhi.n	80025e4 <HAL_TIM_ConfigClockSource+0x168>
 80024f4:	2b50      	cmp	r3, #80	; 0x50
 80024f6:	d03c      	beq.n	8002572 <HAL_TIM_ConfigClockSource+0xf6>
 80024f8:	2b50      	cmp	r3, #80	; 0x50
 80024fa:	d873      	bhi.n	80025e4 <HAL_TIM_ConfigClockSource+0x168>
 80024fc:	2b40      	cmp	r3, #64	; 0x40
 80024fe:	d058      	beq.n	80025b2 <HAL_TIM_ConfigClockSource+0x136>
 8002500:	2b40      	cmp	r3, #64	; 0x40
 8002502:	d86f      	bhi.n	80025e4 <HAL_TIM_ConfigClockSource+0x168>
 8002504:	2b30      	cmp	r3, #48	; 0x30
 8002506:	d064      	beq.n	80025d2 <HAL_TIM_ConfigClockSource+0x156>
 8002508:	2b30      	cmp	r3, #48	; 0x30
 800250a:	d86b      	bhi.n	80025e4 <HAL_TIM_ConfigClockSource+0x168>
 800250c:	2b20      	cmp	r3, #32
 800250e:	d060      	beq.n	80025d2 <HAL_TIM_ConfigClockSource+0x156>
 8002510:	2b20      	cmp	r3, #32
 8002512:	d867      	bhi.n	80025e4 <HAL_TIM_ConfigClockSource+0x168>
 8002514:	2b00      	cmp	r3, #0
 8002516:	d05c      	beq.n	80025d2 <HAL_TIM_ConfigClockSource+0x156>
 8002518:	2b10      	cmp	r3, #16
 800251a:	d05a      	beq.n	80025d2 <HAL_TIM_ConfigClockSource+0x156>
 800251c:	e062      	b.n	80025e4 <HAL_TIM_ConfigClockSource+0x168>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6818      	ldr	r0, [r3, #0]
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	6899      	ldr	r1, [r3, #8]
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	685a      	ldr	r2, [r3, #4]
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	68db      	ldr	r3, [r3, #12]
 800252e:	f000 f95c 	bl	80027ea <TIM_ETR_SetConfig>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	60fb      	str	r3, [r7, #12]
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002540:	60fb      	str	r3, [r7, #12]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	68fa      	ldr	r2, [r7, #12]
 8002548:	609a      	str	r2, [r3, #8]
 800254a:	e04e      	b.n	80025ea <HAL_TIM_ConfigClockSource+0x16e>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6818      	ldr	r0, [r3, #0]
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	6899      	ldr	r1, [r3, #8]
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	685a      	ldr	r2, [r3, #4]
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	f000 f945 	bl	80027ea <TIM_ETR_SetConfig>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	689a      	ldr	r2, [r3, #8]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800256e:	609a      	str	r2, [r3, #8]
 8002570:	e03b      	b.n	80025ea <HAL_TIM_ConfigClockSource+0x16e>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6818      	ldr	r0, [r3, #0]
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	6859      	ldr	r1, [r3, #4]
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	68db      	ldr	r3, [r3, #12]
 800257e:	461a      	mov	r2, r3
 8002580:	f000 f8bc 	bl	80026fc <TIM_TI1_ConfigInputStage>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	2150      	movs	r1, #80	; 0x50
 800258a:	4618      	mov	r0, r3
 800258c:	f000 f913 	bl	80027b6 <TIM_ITRx_SetConfig>
 8002590:	e02b      	b.n	80025ea <HAL_TIM_ConfigClockSource+0x16e>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6818      	ldr	r0, [r3, #0]
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	6859      	ldr	r1, [r3, #4]
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	68db      	ldr	r3, [r3, #12]
 800259e:	461a      	mov	r2, r3
 80025a0:	f000 f8da 	bl	8002758 <TIM_TI2_ConfigInputStage>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	2160      	movs	r1, #96	; 0x60
 80025aa:	4618      	mov	r0, r3
 80025ac:	f000 f903 	bl	80027b6 <TIM_ITRx_SetConfig>
 80025b0:	e01b      	b.n	80025ea <HAL_TIM_ConfigClockSource+0x16e>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6818      	ldr	r0, [r3, #0]
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	6859      	ldr	r1, [r3, #4]
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	68db      	ldr	r3, [r3, #12]
 80025be:	461a      	mov	r2, r3
 80025c0:	f000 f89c 	bl	80026fc <TIM_TI1_ConfigInputStage>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	2140      	movs	r1, #64	; 0x40
 80025ca:	4618      	mov	r0, r3
 80025cc:	f000 f8f3 	bl	80027b6 <TIM_ITRx_SetConfig>
 80025d0:	e00b      	b.n	80025ea <HAL_TIM_ConfigClockSource+0x16e>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4619      	mov	r1, r3
 80025dc:	4610      	mov	r0, r2
 80025de:	f000 f8ea 	bl	80027b6 <TIM_ITRx_SetConfig>
 80025e2:	e002      	b.n	80025ea <HAL_TIM_ConfigClockSource+0x16e>
 80025e4:	bf00      	nop
 80025e6:	e000      	b.n	80025ea <HAL_TIM_ConfigClockSource+0x16e>
 80025e8:	bf00      	nop
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2201      	movs	r2, #1
 80025ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2200      	movs	r2, #0
 80025f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80025fa:	2300      	movs	r3, #0
 80025fc:	4618      	mov	r0, r3
 80025fe:	3710      	adds	r7, #16
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}

08002604 <HAL_TIM_OC_DelayElapsedCallback>:
 8002604:	b480      	push	{r7}
 8002606:	b083      	sub	sp, #12
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
 800260c:	bf00      	nop
 800260e:	370c      	adds	r7, #12
 8002610:	46bd      	mov	sp, r7
 8002612:	bc80      	pop	{r7}
 8002614:	4770      	bx	lr

08002616 <HAL_TIM_IC_CaptureCallback>:
 8002616:	b480      	push	{r7}
 8002618:	b083      	sub	sp, #12
 800261a:	af00      	add	r7, sp, #0
 800261c:	6078      	str	r0, [r7, #4]
 800261e:	bf00      	nop
 8002620:	370c      	adds	r7, #12
 8002622:	46bd      	mov	sp, r7
 8002624:	bc80      	pop	{r7}
 8002626:	4770      	bx	lr

08002628 <HAL_TIM_PWM_PulseFinishedCallback>:
 8002628:	b480      	push	{r7}
 800262a:	b083      	sub	sp, #12
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
 8002630:	bf00      	nop
 8002632:	370c      	adds	r7, #12
 8002634:	46bd      	mov	sp, r7
 8002636:	bc80      	pop	{r7}
 8002638:	4770      	bx	lr

0800263a <HAL_TIM_TriggerCallback>:
 800263a:	b480      	push	{r7}
 800263c:	b083      	sub	sp, #12
 800263e:	af00      	add	r7, sp, #0
 8002640:	6078      	str	r0, [r7, #4]
 8002642:	bf00      	nop
 8002644:	370c      	adds	r7, #12
 8002646:	46bd      	mov	sp, r7
 8002648:	bc80      	pop	{r7}
 800264a:	4770      	bx	lr

0800264c <TIM_Base_SetConfig>:
 800264c:	b480      	push	{r7}
 800264e:	b085      	sub	sp, #20
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
 8002654:	6039      	str	r1, [r7, #0]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	60fb      	str	r3, [r7, #12]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	4a25      	ldr	r2, [pc, #148]	; (80026f4 <TIM_Base_SetConfig+0xa8>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d007      	beq.n	8002674 <TIM_Base_SetConfig+0x28>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800266a:	d003      	beq.n	8002674 <TIM_Base_SetConfig+0x28>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	4a22      	ldr	r2, [pc, #136]	; (80026f8 <TIM_Base_SetConfig+0xac>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d108      	bne.n	8002686 <TIM_Base_SetConfig+0x3a>
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800267a:	60fb      	str	r3, [r7, #12]
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	68fa      	ldr	r2, [r7, #12]
 8002682:	4313      	orrs	r3, r2
 8002684:	60fb      	str	r3, [r7, #12]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	4a1a      	ldr	r2, [pc, #104]	; (80026f4 <TIM_Base_SetConfig+0xa8>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d007      	beq.n	800269e <TIM_Base_SetConfig+0x52>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002694:	d003      	beq.n	800269e <TIM_Base_SetConfig+0x52>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	4a17      	ldr	r2, [pc, #92]	; (80026f8 <TIM_Base_SetConfig+0xac>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d108      	bne.n	80026b0 <TIM_Base_SetConfig+0x64>
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026a4:	60fb      	str	r3, [r7, #12]
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	68db      	ldr	r3, [r3, #12]
 80026aa:	68fa      	ldr	r2, [r7, #12]
 80026ac:	4313      	orrs	r3, r2
 80026ae:	60fb      	str	r3, [r7, #12]
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	695b      	ldr	r3, [r3, #20]
 80026ba:	4313      	orrs	r3, r2
 80026bc:	60fb      	str	r3, [r7, #12]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	68fa      	ldr	r2, [r7, #12]
 80026c2:	601a      	str	r2, [r3, #0]
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	689a      	ldr	r2, [r3, #8]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	62da      	str	r2, [r3, #44]	; 0x2c
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	629a      	str	r2, [r3, #40]	; 0x28
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	4a07      	ldr	r2, [pc, #28]	; (80026f4 <TIM_Base_SetConfig+0xa8>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d103      	bne.n	80026e4 <TIM_Base_SetConfig+0x98>
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	691a      	ldr	r2, [r3, #16]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	631a      	str	r2, [r3, #48]	; 0x30
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2201      	movs	r2, #1
 80026e8:	615a      	str	r2, [r3, #20]
 80026ea:	bf00      	nop
 80026ec:	3714      	adds	r7, #20
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bc80      	pop	{r7}
 80026f2:	4770      	bx	lr
 80026f4:	40012c00 	.word	0x40012c00
 80026f8:	40000400 	.word	0x40000400

080026fc <TIM_TI1_ConfigInputStage>:
 80026fc:	b480      	push	{r7}
 80026fe:	b087      	sub	sp, #28
 8002700:	af00      	add	r7, sp, #0
 8002702:	60f8      	str	r0, [r7, #12]
 8002704:	60b9      	str	r1, [r7, #8]
 8002706:	607a      	str	r2, [r7, #4]
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	6a1b      	ldr	r3, [r3, #32]
 800270c:	617b      	str	r3, [r7, #20]
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	6a1b      	ldr	r3, [r3, #32]
 8002712:	f023 0201 	bic.w	r2, r3, #1
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	621a      	str	r2, [r3, #32]
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	699b      	ldr	r3, [r3, #24]
 800271e:	613b      	str	r3, [r7, #16]
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002726:	613b      	str	r3, [r7, #16]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	011b      	lsls	r3, r3, #4
 800272c:	693a      	ldr	r2, [r7, #16]
 800272e:	4313      	orrs	r3, r2
 8002730:	613b      	str	r3, [r7, #16]
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	f023 030a 	bic.w	r3, r3, #10
 8002738:	617b      	str	r3, [r7, #20]
 800273a:	697a      	ldr	r2, [r7, #20]
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	4313      	orrs	r3, r2
 8002740:	617b      	str	r3, [r7, #20]
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	693a      	ldr	r2, [r7, #16]
 8002746:	619a      	str	r2, [r3, #24]
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	697a      	ldr	r2, [r7, #20]
 800274c:	621a      	str	r2, [r3, #32]
 800274e:	bf00      	nop
 8002750:	371c      	adds	r7, #28
 8002752:	46bd      	mov	sp, r7
 8002754:	bc80      	pop	{r7}
 8002756:	4770      	bx	lr

08002758 <TIM_TI2_ConfigInputStage>:
 8002758:	b480      	push	{r7}
 800275a:	b087      	sub	sp, #28
 800275c:	af00      	add	r7, sp, #0
 800275e:	60f8      	str	r0, [r7, #12]
 8002760:	60b9      	str	r1, [r7, #8]
 8002762:	607a      	str	r2, [r7, #4]
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	6a1b      	ldr	r3, [r3, #32]
 8002768:	f023 0210 	bic.w	r2, r3, #16
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	621a      	str	r2, [r3, #32]
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	699b      	ldr	r3, [r3, #24]
 8002774:	617b      	str	r3, [r7, #20]
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	6a1b      	ldr	r3, [r3, #32]
 800277a:	613b      	str	r3, [r7, #16]
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002782:	617b      	str	r3, [r7, #20]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	031b      	lsls	r3, r3, #12
 8002788:	697a      	ldr	r2, [r7, #20]
 800278a:	4313      	orrs	r3, r2
 800278c:	617b      	str	r3, [r7, #20]
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002794:	613b      	str	r3, [r7, #16]
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	011b      	lsls	r3, r3, #4
 800279a:	693a      	ldr	r2, [r7, #16]
 800279c:	4313      	orrs	r3, r2
 800279e:	613b      	str	r3, [r7, #16]
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	697a      	ldr	r2, [r7, #20]
 80027a4:	619a      	str	r2, [r3, #24]
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	693a      	ldr	r2, [r7, #16]
 80027aa:	621a      	str	r2, [r3, #32]
 80027ac:	bf00      	nop
 80027ae:	371c      	adds	r7, #28
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bc80      	pop	{r7}
 80027b4:	4770      	bx	lr

080027b6 <TIM_ITRx_SetConfig>:
 80027b6:	b480      	push	{r7}
 80027b8:	b085      	sub	sp, #20
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	6078      	str	r0, [r7, #4]
 80027be:	6039      	str	r1, [r7, #0]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	60fb      	str	r3, [r7, #12]
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027cc:	60fb      	str	r3, [r7, #12]
 80027ce:	683a      	ldr	r2, [r7, #0]
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	4313      	orrs	r3, r2
 80027d4:	f043 0307 	orr.w	r3, r3, #7
 80027d8:	60fb      	str	r3, [r7, #12]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	68fa      	ldr	r2, [r7, #12]
 80027de:	609a      	str	r2, [r3, #8]
 80027e0:	bf00      	nop
 80027e2:	3714      	adds	r7, #20
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bc80      	pop	{r7}
 80027e8:	4770      	bx	lr

080027ea <TIM_ETR_SetConfig>:
 80027ea:	b480      	push	{r7}
 80027ec:	b087      	sub	sp, #28
 80027ee:	af00      	add	r7, sp, #0
 80027f0:	60f8      	str	r0, [r7, #12]
 80027f2:	60b9      	str	r1, [r7, #8]
 80027f4:	607a      	str	r2, [r7, #4]
 80027f6:	603b      	str	r3, [r7, #0]
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	617b      	str	r3, [r7, #20]
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002804:	617b      	str	r3, [r7, #20]
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	021a      	lsls	r2, r3, #8
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	431a      	orrs	r2, r3
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	4313      	orrs	r3, r2
 8002812:	697a      	ldr	r2, [r7, #20]
 8002814:	4313      	orrs	r3, r2
 8002816:	617b      	str	r3, [r7, #20]
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	697a      	ldr	r2, [r7, #20]
 800281c:	609a      	str	r2, [r3, #8]
 800281e:	bf00      	nop
 8002820:	371c      	adds	r7, #28
 8002822:	46bd      	mov	sp, r7
 8002824:	bc80      	pop	{r7}
 8002826:	4770      	bx	lr

08002828 <HAL_TIMEx_MasterConfigSynchronization>:
 8002828:	b480      	push	{r7}
 800282a:	b085      	sub	sp, #20
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
 8002830:	6039      	str	r1, [r7, #0]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002838:	2b01      	cmp	r3, #1
 800283a:	d101      	bne.n	8002840 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800283c:	2302      	movs	r3, #2
 800283e:	e041      	b.n	80028c4 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2201      	movs	r2, #1
 8002844:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2202      	movs	r2, #2
 800284c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	60fb      	str	r3, [r7, #12]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	60bb      	str	r3, [r7, #8]
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002866:	60fb      	str	r3, [r7, #12]
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	68fa      	ldr	r2, [r7, #12]
 800286e:	4313      	orrs	r3, r2
 8002870:	60fb      	str	r3, [r7, #12]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	68fa      	ldr	r2, [r7, #12]
 8002878:	605a      	str	r2, [r3, #4]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a14      	ldr	r2, [pc, #80]	; (80028d0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d009      	beq.n	8002898 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800288c:	d004      	beq.n	8002898 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a10      	ldr	r2, [pc, #64]	; (80028d4 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d10c      	bne.n	80028b2 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800289e:	60bb      	str	r3, [r7, #8]
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	68ba      	ldr	r2, [r7, #8]
 80028a6:	4313      	orrs	r3, r2
 80028a8:	60bb      	str	r3, [r7, #8]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	68ba      	ldr	r2, [r7, #8]
 80028b0:	609a      	str	r2, [r3, #8]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2201      	movs	r2, #1
 80028b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2200      	movs	r2, #0
 80028be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80028c2:	2300      	movs	r3, #0
 80028c4:	4618      	mov	r0, r3
 80028c6:	3714      	adds	r7, #20
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bc80      	pop	{r7}
 80028cc:	4770      	bx	lr
 80028ce:	bf00      	nop
 80028d0:	40012c00 	.word	0x40012c00
 80028d4:	40000400 	.word	0x40000400

080028d8 <HAL_TIMEx_CommutCallback>:
 80028d8:	b480      	push	{r7}
 80028da:	b083      	sub	sp, #12
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
 80028e0:	bf00      	nop
 80028e2:	370c      	adds	r7, #12
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bc80      	pop	{r7}
 80028e8:	4770      	bx	lr

080028ea <HAL_TIMEx_BreakCallback>:
 80028ea:	b480      	push	{r7}
 80028ec:	b083      	sub	sp, #12
 80028ee:	af00      	add	r7, sp, #0
 80028f0:	6078      	str	r0, [r7, #4]
 80028f2:	bf00      	nop
 80028f4:	370c      	adds	r7, #12
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bc80      	pop	{r7}
 80028fa:	4770      	bx	lr

080028fc <__libc_init_array>:
 80028fc:	b570      	push	{r4, r5, r6, lr}
 80028fe:	2600      	movs	r6, #0
 8002900:	4d0c      	ldr	r5, [pc, #48]	; (8002934 <__libc_init_array+0x38>)
 8002902:	4c0d      	ldr	r4, [pc, #52]	; (8002938 <__libc_init_array+0x3c>)
 8002904:	1b64      	subs	r4, r4, r5
 8002906:	10a4      	asrs	r4, r4, #2
 8002908:	42a6      	cmp	r6, r4
 800290a:	d109      	bne.n	8002920 <__libc_init_array+0x24>
 800290c:	f000 f822 	bl	8002954 <_init>
 8002910:	2600      	movs	r6, #0
 8002912:	4d0a      	ldr	r5, [pc, #40]	; (800293c <__libc_init_array+0x40>)
 8002914:	4c0a      	ldr	r4, [pc, #40]	; (8002940 <__libc_init_array+0x44>)
 8002916:	1b64      	subs	r4, r4, r5
 8002918:	10a4      	asrs	r4, r4, #2
 800291a:	42a6      	cmp	r6, r4
 800291c:	d105      	bne.n	800292a <__libc_init_array+0x2e>
 800291e:	bd70      	pop	{r4, r5, r6, pc}
 8002920:	f855 3b04 	ldr.w	r3, [r5], #4
 8002924:	4798      	blx	r3
 8002926:	3601      	adds	r6, #1
 8002928:	e7ee      	b.n	8002908 <__libc_init_array+0xc>
 800292a:	f855 3b04 	ldr.w	r3, [r5], #4
 800292e:	4798      	blx	r3
 8002930:	3601      	adds	r6, #1
 8002932:	e7f2      	b.n	800291a <__libc_init_array+0x1e>
 8002934:	0800299c 	.word	0x0800299c
 8002938:	0800299c 	.word	0x0800299c
 800293c:	0800299c 	.word	0x0800299c
 8002940:	080029a0 	.word	0x080029a0

08002944 <memset>:
 8002944:	4603      	mov	r3, r0
 8002946:	4402      	add	r2, r0
 8002948:	4293      	cmp	r3, r2
 800294a:	d100      	bne.n	800294e <memset+0xa>
 800294c:	4770      	bx	lr
 800294e:	f803 1b01 	strb.w	r1, [r3], #1
 8002952:	e7f9      	b.n	8002948 <memset+0x4>

08002954 <_init>:
 8002954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002956:	bf00      	nop
 8002958:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800295a:	bc08      	pop	{r3}
 800295c:	469e      	mov	lr, r3
 800295e:	4770      	bx	lr

08002960 <_fini>:
 8002960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002962:	bf00      	nop
 8002964:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002966:	bc08      	pop	{r3}
 8002968:	469e      	mov	lr, r3
 800296a:	4770      	bx	lr
